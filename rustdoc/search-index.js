var searchIndex = new Map(JSON.parse('[\
["stage2",{"doc":"","t":"JJCHJJHHHJHHHH","n":["CONSOLE_SERIAL","CPUID_PAGE","boot_stage2","check_launch_info","heap_end","heap_start","init_percpu","map_and_validate","panic","pgtable","setup_env","setup_stage2_allocator","shutdown_percpu","stage2_main"],"q":[[0,"stage2"],[14,"bootlib::kernel_launch"],[15,"svsm::platform"],[16,"svsm::config"],[17,"svsm::address"],[18,"svsm::utils::memory_region"],[19,"svsm::address"],[20,"bootlib::kernel_launch"]],"d":["","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"```{bd}``{fd}{{fh{l{j}}n}d}{A`Ab}`{{hfAd}d}{{}d}0{Add}","c":[],"p":[[5,"KernelLaunchInfo",14],[1,"unit"],[10,"SvsmPlatform",15],[6,"SvsmConfig",16],[5,"VirtAddr",17],[5,"MemoryRegion",18],[5,"PhysAddr",17],[5,"PanicInfo",19],[1,"never"],[5,"Stage2LaunchInfo",14]],"b":[]}],\
["svsm",{"doc":"","t":"QCCCCCCCCCCCCCCCCCCQCCCCCCCCCCCCCFFFFFSSFFFFFNOONOOONNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNOOOONNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNOOHNNNNOOOOOOOONOOOOOOOOONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKIFSFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNPPGNNHNNNNNNNNNNNNNNNNNNNNJJFFFJNNNNNNNNNNNNONNNNNNNNHHNNNNONNNNNNNNNNNNNNOEEEECCCCCCEECCCCCCCCCCCTTTFFTTTTTTTTTTTTTTTTTTTTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNNNHHHHJFFNNNNNNNNOOHHHOOOOOOOONNNNNNNNHNNNNNNNNFTTTTTTTTTTTNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNHFNNHHOJJNHNONNNSSHHFJFFSONNNNNNNNNNNNNNNNNNNNNNONNNNNNNHHNNNNNNNNONNNNNNNNNNNNNFNNHNNNNONNNNCEECCSSSSSSSSSSFJSSSSSSSSSSSSSSSSSSFFSSSSSSSSSSSSSFSONNNNNNNNNNNNNNNNNNNNNNNONONNNNONNNNJOHHHHNNNNNHNNONNNONONNNNNHNNNNNNNNNNNNNHHHHHJJJHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHPGPGPPFPSSGPPPPPPPPPPPPPPPPPPPPGPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSFSSNNNNNNNOHHHHONNNNHFFJJFFFFFFFFNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONOOHNNNONNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNONOOONNONNOONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNOOOONNOHNNNOONONNNNNNNNNNNNNNNNNONOHHHHNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNONONNONNOOOHFFFNNNNNNNNNNNNOONNNOOONNNNNNOONNNOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNHHHHSSSHHHHHHHHSSFSNNNNNNNNOONOOOONNNNNPSSSSSSSSPPFGSSNNNNNNNNOONNNNNHHHHHHNNHHNOHHHNNNNNNNNNHHHHHHHHHHHHHHCCSFKSSNNNNMNMNNNNNNNNGPPHNNNNNNNNNNNNCCCPGJJJJJJFFFFSSJPFPNONNNNNNNNNNNNNONNNONONHNNNNNNNNNNNNOHHHONNNNNNNONNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNPFFIGPONNNNNNNNNNNNNNNNNNNNNNNOONNOHOOOONNNNNNNNNNNNNNPPPPPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNNNGKPFKPPFIPGPPCHHMMOOCOCHOMHMHOHHCHMHMMHMHMGKPFKPPIPGPSPNNNNNNNNNNMMONONNNNNNNNNQNNNNNNOMMNNONMMNNMNNNNNNNNNMMJFFFNNNNNNHHOONNNNNNONHNNNNHNNHNNNHNHNNONHNNNNHHNNNNNNNNNNNHHHHNNHFFFNNNNNNONNNONNNNNNNNNNNNNNNNNNOONNNNNNONNNNNNNNNNNNNNNSSSPPFGFSSPSPSNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNSSFFSSSSSFFFFONONNNNNNNNNNNNONNNNNNNNNNNNOOONNNHNNNNNNNNNNNNNNHNONNNNNNOOONNOHHHOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOHHHOCCCCPJPSSGFNNNNNNNNNNONNNNHNNNOONHNHNNNNNONNNNNNNOOPSPPSSSPPSGFFFGONONNNNNNNNNNNNHNNNNNNNNNNONNNNNNNNNNNNNNNNOOONNNNNNOOOOONNOOOONNNHNNHNNNNNNNNNNNNNNNNNNNNNFPPFFFGPFSOONNNNNNNNNNNNONNNNNNNNNNNNOOONNNNNNNNNNNNOOOONNNNNNNNOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNONOOOSSHHHSFFSNNNNNNNNNNNNNNNNNNNNNOOOONNNNONNNNNNNNNNNNNNJFKNNNNNNNNNNNNNNNNHEEEEECCFFFNNNNNNHOOONNNNNNNNNNNNNNNNNNOOOHCNNNNNNNNNNNNFFNNNNOOONNNNNNNNOONNNNNNNNNNNEEEECCEECCCEEEECCCCECCCEJFSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSNNNNNHNOHNNNNOHOHJGPPFPPFPPFPPFPPPPPSSFFTTTPGFFGJPPFTSJFPFFPFFFTTNNNNNNHNHHNHNNNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONHNNNOOONNNNNNNNNNNNNNNNNNNONHNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHHNHNNNNNNNNNNNNOOOOOOOOONNNONONHHNNONHNNNOOOOOOONOONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONONNFNNNHNNNNNNONHHHHNNNNNHFNNHHNNNNNHHHHNONNNOSSJHHHHHTTSJTTJSPPPPJGTTJFFFFFFFJTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNONNNNHNNNNNNNNNNNNNNNNNNNHNNHNNNNNNNNNHNNOOHHNNNHONONONNNHNNHNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNONONNNNSSJFNOHHNNNNHNNNOHNNNJFNONHNNNNNNNNNNNHHNNNNHNNONNNNNNNNNNHHHHHHHHHTSSFNONNNNNNNNNOOONNNNHHHHHFFFFFFFFFFSFFKOOOOOOOOOOMCOOMOOOOMOCOOOOOOOOOEEEEEEEEEEEECCCCCCCFTFFFKNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNONONMOOMNNNONNNOMNONNNNNNNNNNNNNNNNNNNTTTTFFTNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNFONNNNNNNONNNNNNNNNNNNFONNNNNNNNNNNNNONNNNOFNNNNONNNNNNNONNNNNFNNNNNNNNNNNNNNONNNNFONNNNONNNNNNNNNNNNFFSNNNNNNNNONNNNNNNNNNNNNNNNNONNONOONNNNNNNONNOPFGPPJPPKGPONNNNNNNNNNNNNNMMMNNNNNNMMNNNMCNMOOMMMOCNNNNNNNNNNNNMJFNNNNNNNNNNNNNNNNNNNNNNNNJFNNNNNNNNNNNNNNNNNNNNNNNNFSSNNNNCNCNNNONOOOONNNNCNSSSJFSSSSSSSSNNHNNHHHHHHHHHHHONNOHONNNNPPPPPPPPPPGGPPNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNSSSSPGFFNNNNNNNNNNNNONNNNNNNOONNNHOOONNNNNHNNNNNNNNNNNNHHHHFFONNNNOHNNNNNNNOOOOHHHNNNNNNNNHNSJSSSSSSSSSSFSKSSSSNNNNONNNNNNNNNONNNNNNEEEEECCECEEECEEEEEECCCTFGGSTTGTTPTSSSSSSSSFTTTPPPPPNNNNNNNNNNNONNNNNNNOONOONNNNNNNNNNNNNNNNNNNNNNNNQQNNNNNNNNNNNNNOOONNNONNNOOOOOOOOOOONNNNNNNNNNNNNNNNNOOOOHHNNNNNNNNNNNNNNNNNNOOONNNNNOOOFFTTTTTTTTNNNNNNHNONNNNNNNNNNNNONHNONNNNNNNNNNNNONNNNTPFGJGPTTTTTTTTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNHNNNNNHNHNHNNNNNNNNNNNNNNNNNNHHJFSNNNNNNNNNONNONONNNOOOOHHNOOOOONNNONOOOTTTTTTTTFTJTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNHHHHHNNNNNNNNNNHTPPPPTPTGTFTGTTTTTPTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNHHHHHNNHHHHHNHNNNNNNNNNNNNNNNNNSHHFNNNNONNNNNNNNNONNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNOHNHHNNNOCHHHHPPSPPFJSPFFGFIFGFOHHHOHCHOOOHHOOOOOOOOOOOOOOOCHHHOCHOOOOCHHFJFNNNNHHHNONHNNNNNNNNNONNHNONNOHHNNHNHHHNONNNNNNPPSTTPPSJPFFGFFIFFGONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNOONNNNNNNNNNHNNNOONNONNNNNNNNNNOONONNOOOOOOOOONNNNNOOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOFNNNNNNNNNNNONSPSSSSSGPSSSSSSSSNNNNNNNNNNNNEEECECECEEECEKIFFTMNNHOOONNNNMNNOONNNNNNMNNNNMNNNNMNNNNNNMNNMNNNNNNNNNNMNNPPFGFIJPPPNNNNNNNNNNNNNNNNNNNNNHNONNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNONNNNNNNNNNNONNNNHHHHHHHHKJKKMMMCMMMHHFSSNNNNNNNNNNNONNNNNNNNNNCHHHHHH","n":["BIT","acpi","address","config","console","cpu","crypto","debug","error","fs","fw_cfg","fw_meta","greq","igvm_params","io","kernel_region","locking","mm","platform","println","protocols","requests","serial","sev","string","svsm_console","svsm_paging","syscall","task","types","utils","vtpm","tables","ACPICPUInfo","ACPITable","ACPITableBuffer","ACPITableHeader","ACPITableMeta","MADT_HEADER_SIZE","MAX_ACPI_TABLES_SIZE","RSDPDesc","RawACPITableHeader","RawMADTEntryHeader","RawMADTEntryLocalApic","RawMADTEntryLocalX2Apic","acp_table_by_sig","acpi_id","acpi_id","acpi_table_from_offset","apic_id","apic_id","apic_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","buf","chksum","chksum","chksum","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compiler_id","compiler_id","compiler_rev","compiler_rev","content","content_ptr","default","default","default","enabled","entry_len","entry_type","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_fwcfg","from_fwcfg","header","header","header","into","into","into","into","into","into","into","into","into","into","len","len","load_acpi_cpu_info","load_tables","new","new","new","oem_id","oem_id","oem_id","oem_rev","oem_rev","oem_table_id","oem_table_id","offset","print_summary","reserved","rev","rev","rev","rsdt_addr","sig","sig","sig","sig","signature","tables","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Address","InnerAddr","PhysAddr","SIGN_BIT","VirtAddr","add","add","align_up","aligned_mut","aligned_ref","as_mut_ptr","as_ptr","bits","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone_into","clone_into","cmp","cmp","const_add","crosses_page","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","is_aligned","is_aligned_to","is_null","is_page_aligned","new","new","null","null","page_align","page_align_up","page_offset","partial_cmp","partial_cmp","pfn","saturating_add","sign_extend","sub","sub","sub","sub","to_owned","to_owned","to_pgtbl_idx","to_slice","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","FirmwareConfig","IgvmConfig","SvsmConfig","borrow","borrow_mut","check_ovmf_regions","debug_serial_port","find_kernel_region","fmt","from","fw_in_low_memory","get_cpuid_page_address","get_fw_metadata","get_fw_regions","get_memory_regions","get_secrets_page_address","initialize_guest_vmsa","into","invalidate_boot_data","load_cpu_info","page_state_change_required","reserved_kernel_area_size","should_launch_fw","try_from","try_into","type_id","CONSOLE_INITIALIZED","CONSOLE_LOGGER","Console","ConsoleLogger","ConsoleLoggerComponent","WRITER","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","component","enabled","flush","fmt","fmt","fmt","from","from","from","init_console","install_console_logger","into","into","into","log","name","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_str","writer","X86ExceptionContext","X86GeneralRegs","X86InterruptFrame","X86SegmentRegs","control_regs","cpuid","efer","extable","features","gdt","gdt","gdt_mut","ghcb","idt","insn","msr","percpu","registers","smp","tlb","tss","vc","vmsa","AM","CD","CET","CR0Flags","CR4Flags","DE","EM","ET","FSGSBASE","MCE","MP","NE","NW","OSFXSR","OSXMMEXCPT","OSXSAVE","PAE","PCE","PCIDE","PE","PG","PGE","PKE","PSE","PVI","SMAP","SMEP","TS","TSD","UMIP","VME","WP","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","complement","complement","contains","contains","cr0_init","cr4_init","difference","difference","empty","empty","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","insert","insert","intersection","intersection","intersects","intersects","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","not","not","read_cr0","read_cr2","read_cr3","read_cr4","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union","write_cr0","write_cr2","write_cr3","write_cr4","CPUID_PAGE","CpuidLeaf","CpuidResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cpuid_fn","cpuid_subfn","cpuid_table","cpuid_table_raw","dump_cpuid_table","eax","eax","ebx","ebx","ecx","ecx","edx","edx","fmt","fmt","from","from","get","into","into","new","register_cpuid_table","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","EFERFlags","FFXSR","INTWB","LMA","LME","LMSLE","MCOMMIT","NXE","SCE","SVME","TCE","UAIE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","complement","contains","difference","efer_init","empty","extend","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","read_efer","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_into","type_id","union","write_efer","ExceptionTableEntry","borrow","borrow_mut","check_exception_table","dump_exception_table","end","exception_table_end","exception_table_start","from","handle_exception_table","into","start","try_from","try_into","type_id","X86_FEATURE_NX","X86_FEATURE_PGE","cpu_has_nx","cpu_has_pge","GDT","GDT","GDTDesc","GDTEntry","GDT_SIZE","addr","base_limit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_tss_entry","clone","clone","clone","clone_into","clone_into","clone_into","code_64_kernel","code_64_user","data_64_kernel","data_64_user","default","default","default","descriptor","entries","fmt","fmt","fmt","from","from","from","from_raw","gdt","gdt_mut","into","into","into","load","load_tss","new","null","set_tss_entry","size","to_owned","to_owned","to_owned","to_raw","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","GHCBRef","borrow","borrow_mut","current_ghcb","deref","deref_mut","fmt","from","ghcb","into","try_from","try_into","type_id","common","idt","idt_mut","stage2","svsm","AC_VECTOR","BP_VECTOR","BR_VECTOR","CP_VECTOR","CSO_VECTOR","DB_VECTOR","DE_VECTOR","DF_VECTOR","GP_VECTOR","HV_VECTOR","IDT","IDT","IDT_CS_SHIFT","IDT_DPL_MASK","IDT_DPL_SHIFT","IDT_ENTRIES","IDT_IST_MASK","IDT_IST_SHIFT","IDT_PRESENT_MASK","IDT_TARGET_MASK_1","IDT_TARGET_MASK_1_SHIFT","IDT_TARGET_MASK_2","IDT_TARGET_MASK_2_SHIFT","IDT_TARGET_MASK_3","IDT_TARGET_MASK_3_SHIFT","IDT_TYPE_CALL","IDT_TYPE_INT","IDT_TYPE_MASK","IDT_TYPE_SHIFT","IDT_TYPE_TRAP","IdtDesc","IdtEntry","MCE_VECTOR","MF_VECTOR","NMI_VECTOR","NM_VECTOR","NP_VECTOR","OF_VECTOR","PF_ERROR_WRITE","PF_VECTOR","SS_VECTOR","SX_VECTOR","TS_VECTOR","UD_VECTOR","VC_VECTOR","X86ExceptionContext","XF_VECTOR","address","base_limit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_entry","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create","default","default","default","default","entries","entry","error_code","fmt","fmt","fmt","fmt","frame","from","from","from","from","generic_idt_handler_return","high","idt","idt_dpl_mask","idt_mut","idt_type_mask","init","into","into","into","into","is_exception_handler_return_site","ist_entry","load","low","new","no_handler","raw_entry","regs","set_entry","size","to_owned","to_owned","to_owned","to_owned","trap_entry","triple_fault","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user_entry","user_mode","early_idt_init","early_idt_init_no_ghcb","stage2_generic_idt_handler","stage2_generic_idt_handler_no_ghcb","stage2_idt_handler_array","stage2_idt_handler_array_no_ghcb","HV_DOORBELL_ADDR","asm_entry_ac","asm_entry_bp","asm_entry_br","asm_entry_cp","asm_entry_db","asm_entry_de","asm_entry_df","asm_entry_gp","asm_entry_hv","asm_entry_int80","asm_entry_mce","asm_entry_mf","asm_entry_nm","asm_entry_nmi","asm_entry_np","asm_entry_of","asm_entry_pf","asm_entry_ss","asm_entry_sx","asm_entry_ts","asm_entry_ud","asm_entry_vc","asm_entry_xf","common_isr_handler","default_return","early_idt_init","ex_handler_breakpoint","ex_handler_debug","ex_handler_double_fault","ex_handler_general_protection","ex_handler_page_fault","ex_handler_panic","ex_handler_system_call","ex_handler_vmm_communication","idt_init","init_ist_vectors","Cpuid","DecodedInsn","Imm","Immediate","Inb","Inl","Instruction","Inw","MAX_INSN_FIELD_SIZE","MAX_INSN_SIZE","Operand","Outb","Outl","Outw","R10","R11","R12","R13","R14","R15","R8","R9","Rax","Rbp","Rbx","Rcx","Rdmsr","Rdtsc","Rdtscp","Rdx","Reg","Register","Rsp","U16","U32","U8","Wrmsr","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decode","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","new","rdx","size","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","EFER","MSR_GS_BASE","RdtscpOut","SEV_GHCB","SEV_STATUS","borrow","borrow_mut","clone","clone_into","fmt","from","into","pid","rdtsc","rdtscp","read_flags","read_msr","timestamp","to_owned","try_from","try_into","type_id","write_msr","GuestVmsaRef","IstStacks","PERCPU_AREAS","PERCPU_VMSAS","PerCpu","PerCpuAreas","PerCpuInfo","PerCpuShared","PerCpuUnsafe","PerCpuVmsas","VmsaRef","VmsaRegistryEntry","alloc","alloc","alloc_guest_vmsa","alloc_svsm_vmsa","allocate_init_stack","allocate_ist_stacks","allocate_page_table","allocate_stack","apic_id","apic_id","apic_id","areas","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caa","caa_addr","caa_phys","clear_guest_vmsa_if_match","clone","clone","clone","clone_into","clone_into","clone_into","configure_hv_doorbell","cpu","cpu_mut","cpu_shared","cpu_unsafe","cpu_unsafe","current_stack","current_task","current_task","default","default","double_fault_stack","dump_vm_ranges","exists","finish_page_table","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","gen_in_use","generation","get","get_apic_id","get_current_stack","get_pgtable","get_svsm_vmsa","get_top_of_df_stack","get_top_of_stack","ghcb","ghcb_unsafe","guest_owned","guest_owned","guest_vmsa","guest_vmsa_ref","handle_pf","hv_doorbell","hv_doorbell_addr","hv_doorbell_unsafe","in_use","init_stack","initialize_vm_ranges","into","into","into","into","into","into","into","into","into","into","is_online","ist","load","load_pgtable","load_tss","map_guest_caa","map_guest_vmsa","map_self","map_self_stage2","needs_update","new","new","new","new","new","new","new","new","new","new","new_mapping","online","paddr","paddr","pgtbl","populate_page_table","prepare_svsm_vmsa","private","process_requests","push","register","register_ghcb","request_waitqueue","reset_ip","runqueue","runqueue","schedule_init","schedule_prepare","set_online","set_pgtable","set_reset_ip","set_tss_rsp0","set_updated","set_used","setup","setup_ghcb","setup_ghcb","setup_hv_doorbell","setup_idle_task","setup_on_cpu","setup_tss","shared","shared","shared","shutdown","svsm_vmsa","this_cpu","this_cpu_mut","this_cpu_shared","this_cpu_unsafe","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tss","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap_caa","unmap_guest_vmsa","unregister","update_caa","update_guest_caa","update_guest_vmsa","update_guest_vmsa_caa","update_vmsa","update_vmsa_caa","vaddr","virt_range_init","vm_range","vmsa","vmsa","vmsa","vmsa_phys","vmsa_tr_segment","vmsas","vrange_2m","vrange_4k","wait_for_requests","X86GeneralRegs","X86InterruptFrame","X86SegmentRegs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cs","cs","default","default","default","ds","es","flags","fmt","fmt","fmt","from","from","from","fs","gs","into","into","into","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","rip","rsi","rsp","ss","ss","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ap_request_loop","start_ap","start_cpu","start_secondary_cpus","INVLPGB_VALID_ASID","INVLPGB_VALID_GLOBAL","INVLPGB_VALID_VA","do_invlpgb","do_tlbsync","flush_address","flush_address_sync","flush_tlb","flush_tlb_global","flush_tlb_global_sync","flush_tlb_sync","IST_DF","TSS_LIMIT","X86Tss","_IST_INVALID","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","io_bmp_base","ist_stacks","new","reserved1","reserved2","reserved3","stacks","to_gdt_entry","to_owned","try_from","try_into","type_id","DecodeFailed","MSR_SVSM_CAA","SVM_EXIT_CPUID","SVM_EXIT_EXCP_BASE","SVM_EXIT_IOIO","SVM_EXIT_LAST_EXCP","SVM_EXIT_MSR","SVM_EXIT_RDTSC","SVM_EXIT_RDTSCP","UnknownCpuidLeaf","Unsupported","VcError","VcErrorType","X86_TRAP","X86_TRAP_DB","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","error_type","fmt","fmt","fmt","from","from","get_msr","handle_cpuid","handle_ioio","handle_msr","handle_svsm_caa_rdmsr","handle_vc_exception","into","into","ioio_do_in","ioio_get_port","new","rip","snp_cpuid","stage2_handle_vc_exception","stage2_handle_vc_exception_no_ghcb","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vc_decode_insn","vc_decoding_needed","vc_finish_insn","init_guest_vmsa","init_svsm_vmsa","real_mode_code_segment","real_mode_data_segment","real_mode_sys_seg","svsm_code_segment","svsm_data_segment","svsm_gdt_segment","svsm_idt_segment","vmsa_mut_ref_from_vaddr","vmsa_ref_from_vaddr","aead","rustcrypto","AUTHTAG_SIZE","Aes256Gcm","Aes256GcmTrait","IV_SIZE","KEY_SIZE","borrow","borrow_mut","clone","clone_into","decrypt","decrypt","encrypt","encrypt","fmt","from","into","to_owned","try_from","try_into","type_id","AesGcmOperation","Decrypt","Encrypt","aes_gcm_do","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","gdbstub","stacktrace","svsm_gdbstub","Debug","ExceptionType","GDB_INITIALISED","GDB_IO","GDB_SERIAL","GDB_STACK","GDB_STACK_TOP","GDB_STATE","GdbStubBreakpoint","GdbStubConnection","GdbStubTarget","GdbTaskContext","INT3_INSTR","MAX_BREAKPOINTS","PACKET_BUFFER","PageFault","SvsmGdbStub","SwBreakpoint","add_sw_breakpoint","addr","base_ops","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breakpoints","clear_resume_actions","clone","clone_into","cr3","ctx","ctx","ctx_mut","debug_break","drop","eq","flush","fmt","fmt","from","from","from","from","from","from","from","gdb","gdbstub_start","handle_debug_exception","handle_stop","inst","into","into","into","into","into","into","is_breakpoint","is_single_step","list_active_threads","new","new","read","read_addrs","read_registers","remove_sw_breakpoint","resume","set_regs","set_resume_action_continue","set_resume_action_step","support_breakpoints","support_hw_breakpoint","support_hw_watchpoint","support_resume","support_single_step","support_sw_breakpoint","support_thread_extra_info","switch_to_task","target","thread_extra_info","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write_addrs","write_bp_address","write_registers","Invalid","StackFrame","StackUnwinder","StacksBounds","UnwoundStackFrame","Valid","_stack_depth","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_unwound_frame","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","frame_is_last","from","from","from","into","into","into","into_iter","is_exception_frame","is_last","new","next","next_frame","print_stack","rbp","rip","rsp","stacks","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwind_exception_frame","unwind_framepointer_frame","unwind_this_cpu","Acpi","Alloc","FileSystem","Firmware","FwCfg","Ghcb","GhcbMsr","InvalidAddress","Mem","MissingCAA","MissingSecrets","MissingVMSA","SevSnp","SvsmError","Task","Vc","borrow","borrow_mut","clone","clone_into","fmt","from","from","from","from","from","from","from","from","from","from","into","to_owned","try_from","try_into","type_id","DirEntry","Directory","Directory","DirectoryEntry","File","File","FileExists","FileHandle","FileName","FileNotFound","FsError","Inval","PackIt","api","create","create_all","create_directory","create_file","data","entry","filesystem","handle","init","initialize_fs","len","list","list_dir","lookup_entry","mkdir","name","open","populate_ram_fs","ramfs","read","read","seek","size","truncate","unlink","unlink","write","write","DirEntry","Directory","Directory","DirectoryEntry","File","File","FileExists","FileName","FileNotFound","FsError","Inval","MAX_FILENAME_LENGTH","PackIt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_directory","create_file","data","default","entry","file_exists","file_not_found","fmt","fmt","fmt","from","from","from","from","impl_fs_err","into","into","into","inval","is_dir","is_file","len","list","lookup_entry","mapping","mapping","name","new","read","size","to_owned","to_owned","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlink","write","FS_ROOT","FileHandle","RawFileHandle","SvsmFs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","create_all","current","file","fmt","fmt","fmt","from","from","from","handle","initialize","initialize_fs","initialized","into","into","into","list_dir","mapping","mapping","mkdir","new","new","new","open","position","read","read","read","root","root_dir","seek","seek","seek","size","size","split_path","split_path_allow_empty","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlink","walk_path","walk_path_create","write","write","write","populate_ram_fs","RamDirectory","RamFile","RawRamFile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","create_directory","create_file","default","entries","fmt","fmt","fmt","from","from","from","has_entry","increase_capacity","into","into","into","list","lookup_entry","mapping","mapping","new","new","new","pages","rawfile","read","read","read_from_page","set_capacity","size","size","size","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlink","write","write","write_to_page","FW_CFG_CTL","FW_CFG_DATA","FW_CFG_FILE_DIR","FileNotFound","FileSize","FwCfg","FwCfgError","FwCfgFile","KERNEL_REGION_SIZE","KERNEL_REGION_SIZE_MASK","KernelRegion","MAX_FW_CFG_FILES","TooManyFiles","_FW_CFG_ID","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","driver","file_selector","find_kernel_region","find_kernel_region_e820","find_svsm_region","fmt","fmt","fmt","from","from","from","get_memory_regions","into","into","into","iter_flash_regions","new","read_be","read_char","read_le","read_memory_region","select","selector","selector","size","size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","OVMF_SEV_META_DATA_GUID","OVMF_TABLE_FOOTER_GUID","RawMetaBuffer","RawMetaHeader","SEV_META_DESC_TYPE_CAA","SEV_META_DESC_TYPE_CPUID","SEV_META_DESC_TYPE_MEM","SEV_META_DESC_TYPE_SECRETS","SVSM_INFO_GUID","SevFWMetaData","SevMetaDataDesc","SevMetaDataHeader","Uuid","_pad","add_valid_mem","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caa_page","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cpuid_page","data","data","data_len","default","eq","find_table","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_hex","from_str","header","into","into","into","into","into","into","len","len","len","new","new","num_desc","parse_fw_meta_data","parse_sev_meta","print_fw_meta","secrets_page","signature","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uuid","valid_mem","validate_fw_mem_region","validate_fw_memory","validate_fw_memory_vec","version","driver","msg","pld_report","services","Extended","GREQ_DRIVER","Regular","SNP_GUEST_REQ_ERR_BUSY","SNP_GUEST_REQ_INVALID_LEN","SnpGuestRequestClass","SnpGuestRequestDriver","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decrypt_response","drop","encrypt_request","eq","ext_data","fmt","fmt","from","from","guest_request_driver_init","into","into","new","request","response","send","send_extended_guest_request","send_extended_guest_request","send_regular_guest_request","send_regular_guest_request","send_request","seqno_add_two","seqno_last_used","set_user_extdata_size","staging","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_extdata_size","vmpck0_seqno","Aes256Gcm","HDR_VERSION","Invalid","Invalid","MSG_HDR_SIZE","MSG_PAYLOAD_SIZE","MSG_VERSION","ReportRequest","ReportResponse","SNP_GUEST_REQ_MAX_DATA_SIZE","SnpGuestRequestAead","SnpGuestRequestExtData","SnpGuestRequestMsg","SnpGuestRequestMsgHdr","SnpGuestRequestMsgType","algo","as_slice_mut","authtag","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_new","boxed_new","build_iv","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","copy_to_slice","data","decrypt_get","default","encrypt_set","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_aad_slice","hdr","hdr_sz","hdr_version","into","into","into","into","into","is_nclear","msg_seqno","msg_sz","msg_type","msg_version","msg_vmpck","nclear","new","pld","rsvd1","rsvd2","rsvd3","set_authtag","set_encrypted","set_encrypted","set_encrypted_region_4k","set_shared","set_shared","set_shared_region_4k","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","AttestationReport","InvalidKeySelection","InvalidParameters","Signature","SnpReportRequest","SnpReportResponse","SnpReportResponseStatus","Success","TcbVersion","USER_DATA_SIZE","_reserved","author_key_digest","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip_id","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","family_id","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","guest_svn","host_data","id_key_digest","image_id","into","into","into","into","into","into","is_reserved_clear","is_vmpl0","measurement","platform_info","platform_version","policy","r","raw","report","report_data","report_id","report_id_ma","report_size","reported_tcb","reserved","reserved0","reserved1","reserved2","rsvd","s","signature","signature_algo","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from_as_ref","try_from_as_ref","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_data","validate","version","vmpl","vmpl","REPORT_REQUEST_SIZE","REPORT_RESPONSE_SIZE","get_extended_report","get_regular_report","get_report","IGVM_MEMORY_ENTRIES_PER_PAGE","IgvmMemoryMap","IgvmParams","STAGE2_END_ADDR","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","debug_serial_port","find_kernel_region","fmt","fmt","from","from","fw_in_low_memory","get_cpuid_page_address","get_fw_metadata","get_fw_regions","get_memory_regions","get_secrets_page_address","get_vtom","igvm_guest_context","igvm_memory_map","igvm_param_block","igvm_param_page","initialize_guest_vmsa","into","into","load_cpu_info","memory_map","new","page_state_change_required","reserved_kernel_area_size","should_launch_fw","size","to_owned","to_owned","try_aligned_ref","try_from","try_from","try_into","try_into","type_id","type_id","DEFAULT_IO_DRIVER","DefaultIOPort","IOPort","borrow","borrow_mut","clone","clone_into","default","fmt","from","inb","into","inw","outb","outw","to_owned","try_from","try_into","type_id","new_kernel_region","LockGuard","RWLock","ReadLockGuard","SpinLock","WriteLockGuard","rwlock","spinlock","RWLock","ReadLockGuard","WriteLockGuard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compose_val","data","data","data","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","from","from","from","into","into","into","lock_read","lock_write","lock_write_direct","new","rwlock","rwlock","rwlock","split_val","tests","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlock_write_direct","wait_for_readers","wait_for_writers","LockGuard","SpinLock","borrow","borrow","borrow_mut","borrow_mut","current","data","data","default","deref","deref_mut","drop","fmt","fmt","from","from","holder","holder","into","into","lock","new","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","GuestPtr","PageRef","PageTablePart","VMMappingGuard","address_space","alloc","allocate_file_page","allocate_file_page_ref","guestmem","mappings","memory","mmap_kernel","mmap_user","munmap_kernel","munmap_user","page_visibility","pagetable","ptguards","stack","valid_phys_address","validate","virtualrange","vm","writable_phys_addr","KERNEL_MAPPING","KernelMapping","PAGE_SIZE","PAGE_SIZE_2M","PGTABLE_LVL3_IDX_PERCPU","PGTABLE_LVL3_IDX_PERTASK","PGTABLE_LVL3_IDX_SHARED","SIZE_1G","SIZE_1K","SIZE_1M","SIZE_LEVEL0","SIZE_LEVEL1","SIZE_LEVEL2","SIZE_LEVEL3","STACK_GUARD_SIZE","STACK_PAGES","STACK_SIZE","STACK_TOTAL_SIZE","SVSM_PERCPU_BASE","SVSM_PERCPU_CAA_BASE","SVSM_PERCPU_END","SVSM_PERCPU_STACKS_BASE","SVSM_PERCPU_TEMP_BASE","SVSM_PERCPU_TEMP_BASE_2M","SVSM_PERCPU_TEMP_BASE_4K","SVSM_PERCPU_TEMP_END_2M","SVSM_PERCPU_TEMP_END_4K","SVSM_PERCPU_VMSA_BASE","SVSM_PERTASK_BASE","SVSM_PERTASK_END","SVSM_PERTASK_STACK_BASE","SVSM_SHARED_BASE","SVSM_SHARED_STACK_BASE","SVSM_SHARED_STACK_END","SVSM_STACKS_INIT_TASK","SVSM_STACKS_IST_BASE","SVSM_STACK_IST_DF_BASE","USER_MEM_END","USER_MEM_START","borrow","borrow_mut","clone","clone_into","from","init_kernel_mapping_info","into","phys_start","phys_to_virt","to_owned","try_from","try_into","type_id","virt_end","virt_from_idx","virt_start","virt_to_phys","ALLOCATOR","AllocError","Allocated","Allocated","AllocatedInfo","Compound","Compound","CompoundInfo","File","File","FileInfo","Free","Free","FreeInfo","InvalidFilePage","InvalidHeapAddress","InvalidPageOrder","InvalidPageType","InvalidPfn","MAX_ORDER","MIN_ALIGN","MemInfo","MemoryRegion","NEXT_MASK","NEXT_SHIFT","ORDER_MASK","OutOfMemory","PageInfo","PageRef","PageStorageType","PageType","ROOT_MEM","Reserved","Reserved","ReservedInfo","SLAB_MASK","SLAB_PAGE_SIZE","SLAB_PAGE_SLAB","Slab","Slab","SlabCommon","SlabPage","SlabPage","SlabPageInfo","SlabPageSlab","SvsmAllocator","TYPE_MASK","TYPE_SHIFT","add_slab_page","alloc","allocate","allocate","allocate","allocate","allocate_file_page","allocate_file_page","allocate_file_page_ref","allocate_page","allocate_page","allocate_pages","allocate_pages","allocate_pages_info","allocate_pfn","allocate_slab_page","allocate_slab_page","allocate_slot","allocate_zeroed_page","allocate_zeroed_page","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","check_pfn","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common","common","compound_neighbor","dealloc","deallocate","deallocate","deallocate","deallocate_slot","decode","decode","decode","decode","decode","decode","decode_next","decode_order","decode_refcount","decode_slab","default","default","default","default","default","default","destroy","drop","encode","encode","encode","encode","encode","encode","encode_next","encode_order","encode_refcount","encode_slab","end_virt","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free","free","free_one_page","free_page","free_page","free_page_order","free_page_raw","free_pages","free_pages","free_pages","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mem","full_pages","get_capacity","get_file_page","get_file_page","get_free","get_next_page","get_next_page","get_order","get_pfn","get_virt_offset","grow_slab","grow_slab","init","init","init","init","init_compound_page","init_memory","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","item_size","layout_from_ptr","layout_from_size","mark_compound_page","memory_info","memory_info","merge_pages","new","new","new","new","new","new","new","new","new","next_free_pfn","next_page","next_page","next_page","nr_pages","order","order","order","page","page_count","page_info_mut_ptr","page_info_ptr","page_type","pages","phys_addr","phys_addr","phys_to_virt","print_memory_info","put_file_page","put_file_page","read_page_info","ref_count","refill_page_list","root_mem_init","set_next_page","shrink_slab","shrink_slab","slab1024","slab128","slab2048","slab256","slab32","slab512","slab64","split_page","start_phys","start_virt","to_mem","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_pages","try_copy_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_merge_page","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","used_bitmap","vaddr","virt_addr","virt_addr","virt_to_phys","write_page_info","GuestPtr","borrow","borrow_mut","cast","do_movsb","fmt","from","from_ptr","into","new","offset","ptr","read","read_u16","read_u32","read_u64","read_u8","try_from","try_into","type_id","write","write_ref","write_u8","VMMappingGuard","borrow","borrow_mut","create_anon_mapping","create_file_mapping","deref","drop","fmt","from","into","mmap_kernel","mmap_user","munmap_kernel","munmap_user","new","start","try_from","try_into","type_id","vmr","ISA_RANGE_END","ISA_RANGE_START","MEMORY_MAP","init_memory_map","valid_phys_address","writable_phys_addr","make_page_private","make_page_shared","ACCESSED","DIRTY","ENTRY_COUNT","FEATURE_MASK","GLOBAL","HUGE","INIT_PGTABLE","LAUNCH_VMSA_ADDR","Level0","Level1","Level2","Level3","MAX_PHYS_ADDR","Mapping","NX","PRESENT","PRIVATE_PTE_MASK","PTEntry","PTEntryFlags","PTPage","PageTable","PageTablePart","PageTableRef","RawPageTablePart","SHARED_PTE_MASK","USER","WRITABLE","address","address","address","all","alloc","alloc","alloc_pte_2m","alloc_pte_2m","alloc_pte_4k","alloc_pte_4k","alloc_pte_lvl1","alloc_pte_lvl2","alloc_pte_lvl3","allocate_page_table","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_mapping","clear","clone","clone","clone_into","clone_into","clone_shared","complement","contains","copy_entry","cr3_value","data","data_ro","default","default","default","default","default","deref","deref_mut","difference","do_split_4k","drop","drop","empty","entries","entry_to_page","entry_to_pagetable","exec","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free_lvl1","free_lvl2","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get","get_init_pgtable_locked","get_mut","get_or_init_mut","idx","index","index","index","index_mut","init_encrypt_mask","insert","intersection","intersects","into","into","into","into","into","into","into","into","into_iter","is_all","is_clear","is_empty","is_set","iter","iter_names","load","make_private_address","make_pte_private","make_pte_shared","make_shared_address","map_2m","map_2m","map_2m","map_4k","map_4k","map_4k","map_region","map_region_2m","map_region_4k","max_phys_addr","new","not","owned","page","paging_init","paging_init_early","phys_addr","populate_pgtbl_part","present","private_pte_mask","ptr","raw","raw","remove","root","set","set","set_encrypted_4k","set_init_pgtable","set_shared_4k","shared","shared_pte_mask","split_4k","strip_confidentiality_bits","sub","sub_assign","supported_flags","symmetric_difference","task_data","task_data_ro","task_exec","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unmap_2m","unmap_2m","unmap_2m","unmap_4k","unmap_4k","unmap_4k","unmap_region","unmap_region_2m","unmap_region_4k","unset","walk_addr","walk_addr","walk_addr_lvl0","walk_addr_lvl1","walk_addr_lvl2","walk_addr_lvl3","PerCPUPageMappingGuard","borrow","borrow_mut","create","create_4k","drop","fmt","from","huge","into","mapping","try_from","try_into","type_id","virt_addr","BMP_QWORDS","MAX_STACKS","STACK_ALLOC","StackRange","alloc","alloc_bitmap","allocate_stack","allocate_stack_addr","borrow","borrow_mut","dealloc","fmt","free_stack","from","into","new","region","stack_base_pointer","try_from","try_into","type_id","VALID_BITMAP","ValidBitmap","alloc_order","bitmap","bitmap_addr","bitmap_alloc_order","bitmap_len","borrow","borrow_mut","check_addr","clear_all","clear_valid_2m","clear_valid_4k","clear_valid_range","fmt","from","index","init_valid_bitmap_alloc","init_valid_bitmap_ptr","initialized","into","is_valid_4k","migrate","migrate_valid_bitmap","modify_bitmap_word","new","region","set_2m","set_bitmap","set_range","set_region","set_valid_2m","set_valid_4k","set_valid_range","try_from","try_into","type_id","valid_bitmap_addr","valid_bitmap_clear_valid_2m","valid_bitmap_clear_valid_4k","valid_bitmap_clear_valid_range","valid_bitmap_set_valid_2m","valid_bitmap_set_valid_4k","valid_bitmap_set_valid_range","valid_bitmap_valid_addr","validated_phys_addr","CAPACITY","VIRT_ALIGN_2M","VIRT_ALIGN_4K","VirtualRange","alloc","bits","borrow","borrow_mut","default","fmt","free","from","init","into","new","page_count","page_shift","start_virt","try_from","try_into","type_id","used_pages","virt_alloc_range_2m","virt_alloc_range_4k","virt_free_range_2m","virt_free_range_4k","virt_log_usage","Mapping","RawAllocMapping","VMFileMapping","VMFileMappingFlags","VMKernelStack","VMM","VMMAdapter","VMPhysMem","VMR","VMRMapping","VMR_GRANULE","VMReserved","VMalloc","VirtualMapping","alloc","alloc","base","count","end_pfn","flags","flags","guard_pages","link","link_ops","map","mapping","mapping","mapping","mapping_size","pages","pages","pgtbl_parts","pointer_ops","pt_flags","pt_flags","range","range","size","size","size","start_pfn","tree","va","vmr","writable","Mapping","RawAllocMapping","VMFileMapping","VMFileMappingFlags","VMKernelStack","VMM","VMMAdapter","VMPageFaultResolution","VMPhysMem","VMReserved","VMalloc","VirtualMapping","api","file_mapping","kernel_stack","phys_mem","rawalloc","reserved","vmalloc","Mapping","NEW","VMM","VMMAdapter","VMPageFaultResolution","VirtualMapping","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","flags","fmt","fmt","fmt","from","from","from","from","get","get_key","get_link","get_mapping","get_mapping_clone","get_mapping_mut","get_mut","get_value","handle_page_fault","handle_page_fault","has_data","has_data","into","into","into","into","link","link_ops","link_ops","link_ops_mut","map","mapping","mapping","mapping_size","new","new","new","paddr","page_size","page_size","pointer_ops","pointer_ops","pt_flags","range","range","range_pfn","shared","shared","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unmap","unmap","Execute","Fixed","Private","Read","VMFileMapping","VMFileMappingFlags","Write","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","complement","contains","difference","empty","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","handle_page_fault","insert","intersection","intersects","into","into","into_iter","is_all","is_empty","iter","iter_names","map","mapping_size","new","not","pages","pt_flags","remove","set","size","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","VMKernelStack","alloc","alloc_pages","borrow","borrow_mut","bounds","default","fmt","from","guard_pages","into","map","mapping_size","new","new_mapping","new_size","pt_flags","top_of_stack","try_from","try_into","type_id","unmap","VMPhysMem","base","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","map","mapping_size","new","new_mapping","pt_flags","size","to_owned","try_from","try_into","type_id","writable","RawAllocMapping","alloc_page","alloc_pages","borrow","borrow_mut","count","default","fmt","from","into","map","mapping_size","new","pages","present","try_from","try_into","type_id","unmap","VMReserved","borrow","borrow_mut","clone","clone_into","default","fmt","from","has_data","into","map","mapping_size","new","new_mapping","pt_flags","size","to_owned","try_from","try_into","type_id","VMalloc","alloc","alloc_pages","borrow","borrow_mut","default","flags","fmt","from","into","map","mapping_size","new","new_mapping","pt_flags","try_from","try_into","type_id","unmap","VMR","VMRMapping","VMR_GRANULE","alloc_page_tables","borrow","borrow","borrow_mut","borrow_mut","do_insert","drop","dump_ranges","end_pfn","fmt","fmt","from","from","handle_page_fault","initialize","initialize_common","initialize_lazy","insert","insert_aligned","insert_at","insert_hint","into","into","map_vmm","new","new","pgtbl_parts","populate","populate_addr","pt_flags","remove","start_pfn","tree","try_from","try_from","try_into","try_into","type_id","type_id","unmap_vmm","va","virt_addr","virt_range","vmr","Native","PageEncryptionMasks","PageStateChangeOp","Private","Psmash","SVSM_PLATFORM","Shared","Snp","SvsmPlatform","SvsmPlatformCell","Unsmash","addr_mask_width","as_dyn_ref","as_mut_dyn_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","env_setup","env_setup_late","eoi","fmt","fmt","fmt","from","from","from","get_console_io_port","get_page_encryption_masks","into","into","into","invalidate_page_range","native","new","page_state_change","phys_addr_sizes","private_pte_mask","setup_guest_host_comm","setup_percpu","setup_percpu_current","shared_pte_mask","snp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_page_range","CONSOLE_IO","NativePlatform","borrow","borrow_mut","clone","clone_into","default","env_setup","env_setup_late","eoi","fmt","from","get_console_io_port","get_page_encryption_masks","into","invalidate_page_range","new","page_state_change","setup_guest_host_comm","setup_percpu","setup_percpu_current","to_owned","try_from","try_into","type_id","validate_page_range","CONSOLE_IO","SnpPlatform","borrow","borrow_mut","clone","clone_into","default","env_setup","env_setup_late","eoi","fmt","from","get_console_io_port","get_page_encryption_masks","into","invalidate_page_range","new","page_state_change","setup_guest_host_comm","setup_percpu","setup_percpu_current","to_owned","try_from","try_into","type_id","validate_page_range","RequestParams","SVSM_CORE_PROTOCOL","SVSM_VTPM_PROTOCOL","borrow","borrow_mut","clone","clone_into","core","default","errors","fmt","from","from_vmsa","guest_exit_code","into","r8","rcx","rdx","sev_features","to_owned","try_from","try_into","type_id","vtpm","write_back","CORE_PROTOCOL","CORE_PROTOCOL_VERSION_MAX","CORE_PROTOCOL_VERSION_MIN","PVALIDATE_LOCK","PValidateRequest","SVSM_REQ_CORE_CONFIGURE_VTOM","SVSM_REQ_CORE_CREATE_VCPU","SVSM_REQ_CORE_DELETE_VCPU","SVSM_REQ_CORE_DEPOSIT_MEM","SVSM_REQ_CORE_PVALIDATE","SVSM_REQ_CORE_QUERY_PROTOCOL","SVSM_REQ_CORE_REMAP_CA","SVSM_REQ_CORE_WITHDRAW_MEM","borrow","borrow_mut","check_vmsa","clone","clone_into","core_configure_vtom","core_create_vcpu","core_create_vcpu_error_restore","core_delete_vcpu","core_deposit_mem","core_protocol_request","core_pvalidate","core_pvalidate_one","core_query_protocol","core_remap_ca","core_withdraw_mem","entries","from","into","next","protocol_supported","resv","to_owned","try_from","try_into","type_id","BUSY","FatalError","INCOMPLETE","INVALID_ADDRESS","INVALID_FORMAT","INVALID_PARAMETER","INVALID_REQUEST","PROTOCOL_BASE","RequestError","SUCCESS","SvsmReqError","SvsmResultCode","UNSUPPORTED_CALL","UNSUPPORTED_PROTOCOL","borrow","borrow","borrow_mut","borrow_mut","busy","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","impl_req_err","incomplete","into","into","invalid_address","invalid_format","invalid_parameter","invalid_request","protocol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsupported_call","unsupported_protocol","SEND_COMMAND_REQ_INBUF_SIZE","SEND_COMMAND_RESP_OUTBUF_SIZE","SVSM_VTPM_COMMAND","SVSM_VTPM_QUERY","SendCommand","TpmPlatformCommand","TpmSendCommandRequest","TpmSendCommandResponse","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","eq","fmt","fmt","fmt","from","from","from","inbuf","inbuf_size","into","into","into","is_vtpm_platform_command_supported","locality","outbuf","outbuf_size","send","set_outbuf","to_owned","to_owned","to_owned","tpm_send_command_request","try_from","try_from","try_from","try_from","try_from_as_mut_ref","try_from_as_ref","try_into","try_into","try_into","type_id","type_id","type_id","vtpm_command_request","vtpm_platform_commands_supported_bitmap","vtpm_protocol_request","vtpm_query_request","RequestInfo","SvsmCaa","_rsvd","borrow","borrow","borrow_mut","borrow_mut","call_pending","check_requests","clone","clone_into","fmt","from","from","into","into","mem_available","params","protocol","request","request_loop","request_loop_once","request_processing_main","serviced","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_mappings","zeroed","BAUD","DEFAULT_SERIAL_PORT","DLAB","DLH","DLL","FCR","IER","LCR","LSR","MCR","RCVRDY","SERIAL_PORT","SerialPort","TXR","Terminal","XMTRDY","_IIR","_MSR","_RXR","borrow","borrow_mut","clone","clone_into","driver","fmt","from","get_byte","get_byte","inb","init","into","new","outb","port","put_byte","put_byte","to_owned","try_from","try_into","type_id","PvalidateOp","RMPFlags","SecretsPage","SevSnpError","VMPCK_SIZE","ghcb","hv_doorbell","init_hypervisor_ghcb_features","msr_protocol","pvalidate","pvalidate_range","rmp_adjust","secrets_page","secrets_page","secrets_page_mut","sev_es_enabled","sev_snp_enabled","sev_status_init","sev_status_verify","status","utils","vmsa","AP_CREATE","GHCB","GHCBExitCode","GHCBIOSize","GHCB_BUFFER_SIZE","GUEST_EXT_REQUEST","GUEST_REQUEST","GhcbError","HV_DOORBELL","IOIO","InvalidOffset","MSR","PSC_FLAG_HUGE","PSC_FLAG_HUGE_SHIFT","PSC_GFN_MASK","PSC_OP_PRIVATE","PSC_OP_PSMASH","PSC_OP_SHARED","PSC_OP_SHIFT","PSC_OP_UNSMASH","PageStateChangeHeader","RDTSC","RDTSCP","SNP_PSC","Size16","Size32","Size8","VmgexitError","VmgexitInvalid","ap_create","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clear","clone","clone","clone","clone_into","clone_into","clone_into","cpl","cur_entry","default","dr7","end_entry","fmt","fmt","fmt","fmt","from","from","from","from","from","get_cpl_valid","get_dr7_valid","get_exit_code_valid","get_exit_info_1_valid","get_exit_info_2_valid","get_rax_valid","get_rbx_valid","get_rcx_valid","get_rdx_valid","get_sw_scratch_valid","get_sw_x87_state_gpa_valid","get_sw_xcr0_valid","get_usage_valid","get_version_valid","get_xss_valid","ghcb_getter","ghcb_setter","guest_ext_request","guest_request","init","into","into","into","into","into","ioio_in","ioio_out","is_valid","page_state_change","psc_entry","rax","rbx","rcx","rdmsr_regs","rdtsc_regs","rdtscp_regs","rdx","register","register_guest_vmsa","register_hv_doorbell","reserved","reserved_1","reserved_10","reserved_2","reserved_3","reserved_4","reserved_5","reserved_6","reserved_7","reserved_8","reserved_9","set_cpl_valid","set_dr7_valid","set_exit_code_valid","set_exit_info_1_valid","set_exit_info_2_valid","set_rax_valid","set_rbx_valid","set_rcx_valid","set_rdx_valid","set_sw_scratch_valid","set_sw_x87_state_gpa_valid","set_sw_xcr0_valid","set_usage_valid","set_valid","set_version_valid","set_xss_valid","shutdown","sw_exit_code","sw_exit_info_1","sw_exit_info_2","sw_scratch","switch_to_vmpl","switch_to_vmpl_unsafe","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usage","valid_bitmap","version","vmgexit","write_buffer","wrmsr","wrmsr_raw","wrmsr_regs","x87_state_gpa","xcr0","xss","HVDoorbell","HVDoorbellFlags","MC_PENDING_BITS","MC_PENDING_OFFSET","NMI_PENDING_BITS","NMI_PENDING_OFFSET","NO_FURTHER_SIGNAL_BITS","NO_FURTHER_SIGNAL_OFFSET","RSVD_6_2_BITS","RSVD_6_2_OFFSET","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","current_hv_doorbell","default","flags","fmt","fmt","from","from","from","init","into","into","mc_pending","new","nmi_pending","no_eoi_required","no_eoi_required","no_further_signal","process_hv_events","process_pending_events","reserved","rsvd_6_2","set_mc_pending","set_nmi_pending","set_no_further_signal","set_rsvd_6_2","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vector","with_mc_pending","with_nmi_pending","with_no_further_signal","with_rsvd_6_2","APIC_ID_LIST","DataMismatch","GHCBHvFeatures","GHCBMsr","GHCB_HV_FEATURES","GhcbMsrError","InfoMismatch","SEV_INFO_REQ","SEV_INFO_RESP","SEV_PAGE_STATE_CHANGE","SEV_SNP","SEV_SNP_AP_CREATION","SEV_SNP_MULTI_VMPL","SEV_SNP_RESTR_INJ","SEV_SNP_RESTR_INJ_TIMER","SNP_HV_FEATURES_REQ","SNP_HV_FEATURES_RESP","SNP_REG_GHCB_GPA_REQ","SNP_REG_GHCB_GPA_RESP","SNP_STATE_CHANGE_REQ","SNP_STATE_CHANGE_RESP","TERM_REQ","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","complement","contains","difference","empty","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","hypervisor_ghcb_features","init_hypervisor_ghcb_features","insert","intersection","intersects","into","into","into","into_iter","invalidate_page_msr","is_all","is_empty","iter","iter_names","not","register_ghcb_gpa_msr","remove","request_termination_msr","set","set_page_valid_status_msr","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","validate_page_msr","verify_ghcb_version","SECRETS_PAGE","SecretsPage","VMPCK_SIZE","borrow","borrow_mut","clear_vmpck","clone","clone_into","copy_for_vmpl","copy_from","copy_to","default","fms","fmt","from","gctxt","get_vmpck","gosvw","into","is_vmpck_clear","new","reserved_00c","reserved_0a0","reserved_15d","reserved_164","secrets_page","secrets_page_mut","set_svsm_data","svsm_base","svsm_caa","svsm_guest_vmpl","svsm_max_version","svsm_size","to_owned","try_from","try_into","tsc_factor","type_id","version","vmpck","vmsa_tweak_bmp","ALT_INJ","BTB_ISOLATION","DBGSWP","PREV_HOST_IBS","REFLECT_VC","REST_INJ","SECURE_TSC","SEV","SEVStatusFlags","SEV_ES","SEV_FLAGS","SEV_SNP","VMSA_REG_PROT","VTOM","all","as_sev_features","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","read_sev_status","remove","set","sev_es_enabled","sev_flags","sev_snp_enabled","sev_status_init","sev_status_verify","sub","sub_assign","symmetric_difference","to_owned","to_string","toggle","try_from","try_into","type_id","union","vtom_enabled","BIT_VMSA","FAIL_INPUT","FAIL_PERMISSION","FAIL_SIZEMISMATCH","FAIL_UNCHANGED","GUEST_VMPL","Invalid","NONE","PvalidateOp","READ","RMPFlags","RWX","SevSnpError","VMPL0","VMPL1","VMPL2","VMPL3","VMSA","Valid","WRITE","X_SUPER","X_USER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_dr7","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","iter","iter_names","not","pvalidate","pvalidate_range","pvalidate_range_4k","raw_vmgexit","raw_vmmcall","remove","ret","rmp_adjust","rmp_clear_guest_vmsa","rmp_grant_guest_access","rmp_revoke_guest_access","rmp_set_guest_vmsa","set","set_dr7","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","VMPL_MAX","allocate_new_vmsa","free_vmsa","FixedString","borrow","borrow_mut","clone","clone_into","data","default","eq","eq","fmt","fmt","from","from","from","into","len","length","new","push","to_owned","to_string","try_from","try_into","type_id","NativeIOPort","SVSMIOPort","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","fmt","from","from","inb","inb","into","into","inw","inw","new","new","outb","outb","outw","outw","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","IgvmParamInfo","borrow","borrow_mut","from","igvm_params","init_page_table","into","invalidate_boot_memory_region","invalidate_early_boot_memory","try_from","try_into","type_id","virt_addr","handlers","sys_exit","sys_hello","sys_exit","sys_hello","BLOCKED","CloseFailed","INITIAL_TASK_ID","NotTerminated","RUNNING","RunQueue","TASKLIST","TASK_FLAG_SHARE_PT","TERMINATED","Task","TaskContext","TaskError","TaskListAdapter","TaskPointer","TaskRunListAdapter","TaskState","WaitQueue","alloc","create_kernel_task","create_user_task","current_task","current_task","current_task_terminated","exec","exec_user","flags","id","idle_task","is_current_task","is_task_fault","link_ops","link_ops","list_link","page_table","phantom","pointer_ops","pointer_ops","ptr","regs","ret_addr","rsp","rsp","run_list","runlist_link","sched_state","schedule","schedule","schedule_init","schedule_task","stack_bounds","tasks","terminate","terminated_task","vm_kernel_range","vm_user_range","waiter","waiting","convert_elf_phdr_flags","exec_user","RunQueue","TASKLIST","TaskList","borrow","borrow","borrow_mut","borrow_mut","create_kernel_task","create_user_task","current_task","current_task","current_task","current_task_id","current_task_terminated","default","default","fmt","fmt","from","from","get_next_task","get_task","handle_task","idle_task","into","into","is_current_task","list","list","new","new","run_list","schedule","schedule_init","schedule_init","schedule_prepare","schedule_task","set_idle_task","switch_to","task_pointer","terminate","terminate","terminated_task","try_from","try_from","try_into","try_into","type_id","type_id","BLOCKED","CloseFailed","INITIAL_TASK_ID","NEW","NEW","NotTerminated","RUNNING","TASK_FLAG_SHARE_PT","TASK_ID_ALLOCATOR","TERMINATED","Task","TaskContext","TaskError","TaskIDAllocator","TaskListAdapter","TaskPointer","TaskRunListAdapter","TaskSchedState","TaskState","alloc","allocate_ktask_stack","allocate_stack_common","allocate_utask_stack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cpu","create","create_user","default","default","default","default","default","eq","eq","fault","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_link","get_link","get_task_id","get_value","get_value","handle_pf","id","idle_task","into","into","into","into","into","into","into","into","is_idle_task","is_running","is_task_fault","is_terminated","link_ops","link_ops","link_ops","link_ops","link_ops_mut","link_ops_mut","list_link","mmap_common","mmap_kernel","mmap_kernel_guard","mmap_user","munmap_kernel","munmap_user","new","new","new","next_id","next_id","page_table","panic_on_idle","phantom","pointer_ops","pointer_ops","pointer_ops","pointer_ops","ptr","regs","ret_addr","rsp","rsp","runlist_link","sched_state","set_idle_task","set_task_blocked","set_task_running","set_task_terminated","stack_bounds","stack_bounds","state","task_exit","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_cpu","vm_kernel_range","vm_user_range","WaitQueue","borrow","borrow_mut","default","fmt","from","into","new","try_from","try_into","type_id","wait_for_event","waiter","wakeup","GUEST_VMPL","Huge","MAX_CPUS","PAGE_SHIFT","PAGE_SHIFT_2M","PAGE_SIZE","PAGE_SIZE_2M","PageSize","Regular","SVSM_CS","SVSM_CS_FLAGS","SVSM_DS","SVSM_DS_FLAGS","SVSM_TR_FLAGS","SVSM_TSS","SVSM_USER_CS","SVSM_USER_DS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","MemoryRegion","align_down","align_up","bitmap_allocator","halt","immut_after_init","is_aligned","memory_region","overlap","page_align_up","page_offset","util","zero_mem_region","BitmapAllocator","BitmapAllocator1024","BitmapAllocator64","BitmapAllocatorTree","CAPACITY","alloc","alloc","alloc","alloc_aligned","bits","bits","bits","borrow","borrow","borrow_mut","borrow_mut","capacity","capacity","capacity","child","child","clone","clone","clone_into","clone_into","default","default","empty","empty","empty","fmt","fmt","free","free","free","from","from","get","get","get","into","into","new","new","next_free","next_free","next_free","set","set","set","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","used","used","used","AlreadyInit","Err","ImmutAfterInitCell","ImmutAfterInitError","ImmutAfterInitRef","ImmutAfterInitResult","MULTI_THREADED","NotSingleThreaded","Ok","Uninitialized","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_init","check_single_threaded","check_uninit","clone","clone_into","deref","deref","fmt","fmt","fmt","from","from","from","get","get_inner","immut_after_init_set_multithreaded","init","init","init_from_cell","init_from_ref","into","into","into","new","new_from_ref","reinit","set_init","set_inner","to_owned","try_from","try_from","try_from","try_get_inner","try_into","try_into","try_into","type_id","type_id","type_id","uninit","uninit","MemoryRegion","borrow","borrow_mut","checked_new","clone","clone_into","contains","contains_region","contiguous","end","end","fmt","from","from_addresses","into","is_empty","iter_pages","len","merge","new","overlap","start","start","to_owned","try_from","try_into","type_id","align_down","align_up","halt","is_aligned","overlap","page_align_up","page_offset","zero_mem_region","MsTpmSimulatorInterface","VTPM","VtpmInterface","VtpmProtocolInterface","get_supported_commands","init","is_powered_on","mstpm","send_tpm_command","signal_nvon","signal_poweron","vtpm_get_locked","vtpm_init","MsTpm","TPM_BUFFER_MAX_SIZE","TPM_CMDS_SUPPORTED","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_supported_commands","init","into","is_powered_on","is_powered_on","manufacture","new","send_tpm_command","signal_nvon","signal_poweron","teardown","to_owned","try_from","try_into","type_id","wrapper","abort","calloc","free","malloc","realloc","serial_out"],"q":[[0,"svsm"],[32,"svsm::acpi"],[33,"svsm::acpi::tables"],[198,"svsm::address"],[279,"svsm::config"],[305,"svsm::console"],[354,"svsm::cpu"],[377,"svsm::cpu::control_regs"],[513,"svsm::cpu::cpuid"],[554,"svsm::cpu::efer"],[616,"svsm::cpu::extable"],[631,"svsm::cpu::features"],[635,"svsm::cpu::gdt"],[695,"svsm::cpu::ghcb"],[708,"svsm::cpu::idt"],[713,"svsm::cpu::idt::common"],[837,"svsm::cpu::idt::stage2"],[843,"svsm::cpu::idt::svsm"],[880,"svsm::cpu::insn"],[982,"svsm::cpu::msr"],[1005,"svsm::cpu::percpu"],[1241,"svsm::cpu::registers"],[1306,"svsm::cpu::smp"],[1310,"svsm::cpu::tlb"],[1321,"svsm::cpu::tss"],[1345,"svsm::cpu::vc"],[1402,"svsm::cpu::vmsa"],[1413,"svsm::crypto"],[1415,"svsm::crypto::aead"],[1435,"svsm::crypto::rustcrypto"],[1451,"svsm::debug"],[1453,"svsm::debug::gdbstub"],[1454,"svsm::debug::gdbstub::svsm_gdbstub"],[1565,"svsm::debug::stacktrace"],[1619,"svsm::error"],[1655,"svsm::fs"],[1697,"svsm::fs::api"],[1764,"svsm::fs::filesystem"],[1829,"svsm::fs::init"],[1830,"svsm::fs::ramfs"],[1886,"svsm::fw_cfg"],[1947,"svsm::fw_meta"],[2062,"svsm::greq"],[2066,"svsm::greq::driver"],[2113,"svsm::greq::msg"],[2219,"svsm::greq::pld_report"],[2335,"svsm::greq::services"],[2340,"svsm::igvm_params"],[2388,"svsm::io"],[2407,"svsm::kernel_region"],[2408,"svsm::locking"],[2415,"svsm::locking::rwlock"],[2463,"svsm::locking::spinlock"],[2493,"svsm::mm"],[2517,"svsm::mm::address_space"],[2573,"svsm::mm::alloc"],[2957,"svsm::mm::guestmem"],[2980,"svsm::mm::mappings"],[3000,"svsm::mm::memory"],[3006,"svsm::mm::page_visibility"],[3008,"svsm::mm::pagetable"],[3251,"svsm::mm::ptguards"],[3266,"svsm::mm::stack"],[3287,"svsm::mm::validate"],[3333,"svsm::mm::virtualrange"],[3360,"svsm::mm::vm"],[3405,"svsm::mm::vm::mapping"],[3424,"svsm::mm::vm::mapping::api"],[3505,"svsm::mm::vm::mapping::file_mapping"],[3580,"svsm::mm::vm::mapping::kernel_stack"],[3602,"svsm::mm::vm::mapping::phys_mem"],[3623,"svsm::mm::vm::mapping::rawalloc"],[3642,"svsm::mm::vm::mapping::reserved"],[3662,"svsm::mm::vm::mapping::vmalloc"],[3681,"svsm::mm::vm::range"],[3728,"svsm::platform"],[3792,"svsm::platform::native"],[3818,"svsm::platform::snp"],[3844,"svsm::protocols"],[3869,"svsm::protocols::core"],[3908,"svsm::protocols::errors"],[3955,"svsm::protocols::vtpm"],[4014,"svsm::requests"],[4047,"svsm::serial"],[4087,"svsm::sev"],[4109,"svsm::sev::ghcb"],[4274,"svsm::sev::hv_doorbell"],[4327,"svsm::sev::msr_protocol"],[4432,"svsm::sev::secrets_page"],[4473,"svsm::sev::status"],[4548,"svsm::sev::utils"],[4656,"svsm::sev::vmsa"],[4659,"svsm::string"],[4683,"svsm::svsm_console"],[4719,"svsm::svsm_paging"],[4732,"svsm::syscall"],[4735,"svsm::syscall::handlers"],[4737,"svsm::task"],[4794,"svsm::task::exec"],[4796,"svsm::task::schedule"],[4845,"svsm::task::tasks"],[5011,"svsm::task::waiting"],[5025,"svsm::types"],[5054,"svsm::utils"],[5067,"svsm::utils::bitmap_allocator"],[5128,"svsm::utils::immut_after_init"],[5185,"svsm::utils::memory_region"],[5212,"svsm::utils::util"],[5220,"svsm::vtpm"],[5233,"svsm::vtpm::mstpm"],[5259,"svsm::vtpm::mstpm::wrapper"],[5265,"core::option"],[5266,"core::result"],[5267,"core::fmt"],[5268,"core::fmt"],[5269,"core::any"],[5270,"core::cmp"],[5271,"alloc::string"],[5272,"cpuarch::vmsa"],[5273,"log"],[5274,"log"],[5275,"bitflags::iter"],[5276,"bitflags::iter"],[5277,"core::cell"],[5278,"core::cell"],[5279,"cpuarch::vmsa"],[5280,"gdbstub::target::ext::base"],[5281,"core::ops::function"],[5282,"gdbstub::common"],[5283,"gdbstub::common::signal"],[5284,"gdbstub::target::ext::breakpoints"],[5285,"gdbstub::target::ext::breakpoints"],[5286,"gdbstub::target::ext::base::multithread"],[5287,"packit"],[5288,"core::iter::traits::double_ended"],[5289,"core::iter::traits::iterator"],[5290,"bootlib::kernel_launch"],[5291,"alloc::boxed"],[5292,"core::fmt"],[5293,"core::alloc::layout"],[5294,"core::marker"],[5295,"intrusive_collections::rbtree"],[5296,"bootlib::platform"],[5297,"core::marker"],[5298,"elf::program_header"],[5299,"intrusive_collections::linked_list"],[5300,"core::clone"],[5301,"core::cmp"],[5302,"core::ffi"]],"d":["Obtain bit for a given position","","","","","","SVSM kernel crypto API","","High level error typing for the public SVSM APIs.","","","","<code>SNP_GUEST_REQUEST</code> mechanism to communicate with the PSP","","","","","","","","","","","","","","","","","","","This crate defines the Virtual TPM interfaces and shows …","","Information about an ACPI CPU","ACPI table, both header and contents","ACPI Table Buffer A buffer containing ACPI tables. …","Higher level representation of the raw ACPI table header","ACPI Table Metadata Metadata associated with an ACPI, …","","","ACPI Root System Description Pointer (RSDP) used by ACPI …","Raw header of an ACPI table. It corresponds to the …","Header of an entry within MADT","Entry for a local APIC within MADT","Entry for a local X2APIC within MADT","Retrieve an ACPI table by its signature.","","","Retrieve an ACPI table from a specified offset within the …","","","The APIC ID for the CPU","","","","","","","","","","","","","","","","","","","","","Raw binary content of ACPI table","","Checksum to add to all other bytes","Checksum for data integrity","","","","","","","","","","","","ID for compiler","","Revision of compiler used to create the table","","Get the content of the ACPI table.","Get a pointer to the content of the ACPI table at a …","","","","Indicates whether the CPU is enabled","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an RSPDesc instance from FwCfg","Create a new <code>ACPITableBuffer</code> instance from a firmware …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Length of the table","","Loads ACPI CPU information by parsing the ACPI tables.","Load ACPI tables and their metadata from the ACPI Root …","Create a new <code>ACPITableHeader</code> from a raw <code>RawACPITableHeader</code>.","Create a new <code>ACPITable</code> from raw binary data.","Create a new <code>ACPITableMeta</code> instance.","OEM-supplied string","OEM-supplied string to identify OEM","","OEM-supplied version number","","OEM-supplied string to identify tables","","The offset of the table within the table buffer","Print a human-readable summary of the ACPI table header’…","","Revision of the ACPI","Revision (signature field)","","Physical address of the RSDT","Signature must contain “RSD PTR”","Signature specificies the type of ACPI table","","4-character signature of the table","Get the signature of the ACPI table.","Collection of metadata for ACPI tables, including …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the <code>VirtAddr</code> to a reference to the given type, …","Converts the <code>VirtAddr</code> to a reference to the given type, …","","","arithmetic manipulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the index into page-table pages of given levels.","Converts the <code>VirtAddr</code> to a slice of a given type","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An immediate value in an instruction","","","A view of an x86 instruction.","","","","An operand in an instruction, which might be a register or …","","","","","","","","","","","","","","","","","","","","","A register in an instruction","","","","","","","","","","","","","","","","","","","","","","","","","","Decode the instruction. At the moment, the decoding is …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stack boundaries of the currently running task. This is …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Create a new virtual memory mapping in the PerCpu VMR","","","","","Add the PerCpu virtual range into the provided pagetable","","","","","","","WaitQueue for request processing","","","Task list that has been assigned for scheduling on this CPU","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","PerCpu Virtual Memory Range","","","","","","","Address allocator for per-cpu 2m temporary mappings","Address allocator for per-cpu 4k temporary mappings","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Handles a read from the SVSM-specific MSR defined the in …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","API for authentication encryption with associated data","RustCrypto implementation","Authenticated tag size (128 bits)","Aes256Gcm type","AES-256 GCM","Initialization vector size (96 bits)","Key size","","","","","Decrypt the provided buffer using AES-256 GCM","","Encrypt the provided buffer using AES-256 GCM","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Errors related to ACPI parsing.","Errors related to the memory allocator","Errors from the filesystem.","Errors related to firmware parsing","Errors related to firmware configuration contents","Errors related to GHCB","Errors related to MSR protocol","Invalid address, usually provided by the guest","Generic errors related to memory management","Error reported when there is no CAA (Calling Area Address) …","Error reported when there is no secrets page set up.","Error reported when there is no VMSA set up.","Errors related to SEV-SNP operations, like PVALIDATE or …","A generic error during SVSM operation.","Task management errors,","Errors from #VC handler","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","Represents a directory entry which could either be a file …","Represents directory operations","","Directory entries including their names.","Represents file operations","","","Represents a handle used for file operations in a …","","","Represents the type of error occured while doing SVSM …","","","","Used to create a file with the given path.","Used to create a file and the missing subdirectories in …","Used to create a subdirectory in the directory.","Used to create a new file in the directory.","","","","","","Used to initialize the filesystem with an empty root …","","Used to get the list of entries in the directory.","Used to list the contents of a directory.","Used to lookup for an entry in the directory.","Used to create a directory with the given path.","","Used to open a file to get the file handle for further …","Used to create a SVSM RAM filesystem from a filesystem …","","Used to read from a file handle.","Used to read contents of a file","Used to set the file offset","Used to get the size of the file.","Used to truncate the file to the specified size.","Used to delete a file or a directory.","Used to remove an entry from the directory.","Used to write into file handle.","Used to write contents to a file","Represents a directory entry which could either be a file …","Represents directory operations","","Directory entries including their names.","Represents file operations","","","","","Represents the type of error occured while doing SVSM …","","Maximum supported length for a single filename","","","","","","","","","","","","Used to create a subdirectory in the directory.","Used to create a new file in the directory.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Used to define methods of <code>FsError</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Used to check if a <code>DirEntry</code> variable is a directory.","Used to check if a <code>DirEntry</code> variable is a file.","","Used to get the list of entries in the directory.","Used to lookup for an entry in the directory.","Get reference to backing pages of the file","Get reference to backing pages of the file","","Create a new <code>DirectoryEntry</code> instance.","Used to read contents of a file","Used to get the size of the file.","","","Used to truncate the file to the specified size.","","","","","","","","","","Used to remove an entry from the directory.","Used to write contents to a file","","Represents a handle used for file operations in a …","Represents a raw file handle.","Represents SVSM filesystem","","","","","","","Used to create a file with the given path.","Used to create a file and the missing subdirectories in …","current file offset for the read/write operation","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Used to set the root directory of the SVSM filesystem.","Used to initialize the filesystem with an empty root …","Used to check if the filesystem is initialized.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Used to list the contents of a directory.","","","Used to create a directory with the given path.","","Create a new file handle instance.","","Used to open a file to get the file handle for further …","","Used to read from a file handle.","","Used to read contents from the file handle.","","Used to get the root directory of the filesystem.","Used to set the file offset","","Used to change the current file offset.","","Used to get the size of the file.","Used to get an iterator over all the directory and file …","Used to get an iterator over all the directory and file …","","Used to truncate the file to the specified size.","","","","","","","","","","Used to delete a file or a directory.","Used to perform a walk over the items in a path while …","Used to perform a walk over the items in a path while …","Used to write into file handle.","","Used to write contents to the file handle","Used to create a SVSM RAM filesystem from a filesystem …","Represents a SVSM directory with synchronized access","Represents a SVSM file with synchronized access","Represents an SVSM Ramfile","","","","","","","Maximum size of the file without allocating new pages","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Used to check if an entry is present in the directory.","Used to increase the capacity of the file by allocating a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Used to get new instance of <code>RawRamFile</code>.","Used to get a new instance of <code>RamFile</code>.","Used to get a new instance of <code>RamDirectory</code>","Vector of pages allocated for the file","","Used to read the file from a particular offset.","","Used to read a page corresponding to the file from a …","Used to set the capacity of the file.","Used to get the size of the file in bytes.","","Current size of the file","Used to truncate the file to a given size.","","","","","","","","","","","","Used to write to the file at a particular offset.","","Used to write contents to a page corresponding to the file …","","","","","","","","","","","","","The firmware provided too many files to the guest","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find a table with the given UUID in the given memory …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Parse the firmware metadata from the given slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Driver to send <code>SNP_GUEST_REQUEST</code> commands to the PSP. It …","Message that carries an encrypted <code>SNP_GUEST_REQUEST</code> …","<code>SNP_GUEST_REQUEST</code> command to request an attestation report.","API to send <code>SNP_GUEST_REQUEST</code> commands to the PSP","","Global <code>SNP_GUEST_REQUEST</code> driver instance","","Hypervisor busy, try again","Buffer provided is too small","Class of the <code>SNP_GUEST_REQUEST</code> command: Regular or Extended","<code>SNP_GUEST_REQUEST</code> driver","","","","","","","","","","","Extended data buffer that will be provided to the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the global <code>SnpGuestRequestDriver</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>SnpGuestRequestDriver</code>","Shared page used for the <code>SNP_GUEST_REQUEST</code> request","Shared page used for the <code>SNP_GUEST_REQUEST</code> response","Call the GHCB layer to send the encrypted …","Send the provided extended <code>SNP_GUEST_REQUEST</code> command to …","Send the provided extended <code>SNP_GUEST_REQUEST</code> command to …","Send the provided regular <code>SNP_GUEST_REQUEST</code> command to the …","Send the provided regular <code>SNP_GUEST_REQUEST</code> command to the …","Send the provided VMPL0 <code>SNP_GUEST_REQUEST</code> command to the …","Increase the VMPCK0 sequence number by two. In order to …","Get the last VMPCK0 sequence number accounted","Set the user_extdata_size to <code>n</code> and clear the first <code>n</code> bytes …","Encrypted page where we perform crypto operations","","","","","","","","Extended data size (<code>certs</code> size) provided by the user in …","Each <code>SNP_GUEST_REQUEST</code> message contains a sequence number …","","Version of the message header","","","Message header size","Message payload size","Version of the message payload","","","Maximum buffer size that the hypervisor takes to store the …","AEAD Algorithm Encodings (AMD SEV-SNP spec. table 99)","Data page(s) the hypervisor will use to store certificate …","<code>SNP_GUEST_REQUEST</code> message format","<code>SNP_GUEST_REQUEST</code> message header format (AMD SEV-SNP spec. …","Message Type Encodings (AMD SEV-SNP spec. table 100)","The AEAD used to encrypt this message","Get <code>SnpGuestRequestMsgHdr</code> as a mutable slice reference","Message authentication tag","","","","","","","","","","","Allocate the object in the heap without going through …","Allocate the object in the heap without going through …","Build the initialization vector for AES-256 GCM","Fill the <code>SnpGuestRequestMsg</code> fields with zeros","","","","","","","","","Fill up the <code>outbuf</code> slice provided with bytes from data","According to the GHCB spec, the data page(s) must be …","Decrypt the <code>SNP_GUEST_REQUEST</code> command stored in the …","default() method implementation. We can’t derive Default …","Encrypt the provided <code>SNP_GUEST_REQUEST</code> command and store …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a slice of the header fields used as additional …","","The size of the message header in bytes","The version of the message header","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the first <code>n</code> bytes from data are zeroed","The sequence number for this message","The size of the payload in bytes","The type of the payload","The version of the payload","The ID of the VMPCK used to protect this message","Clear the first <code>n</code> bytes from data","Allocate a new <code>SnpGuestRequestMsgHdr</code> and initialize it","","Reserve. Must be zero.","Reserved. Must be zero.","Reserved. Must be zero.","Set the authenticated tag","Set the C-bit (memory encryption bit) for the Self page","Set the C-bit (memory encryption bit) for the Self pages","Set to encrypted all the 4k pages of a memory range","Clear the C-bit (memory encryption bit) for the Self page","Clear the C-bit (memory encryption bit) for the Self pages","Set to shared all the 4k pages of a memory range","","","","","","","","","","","","","","","","","","","","","Validate the <code>SnpGuestRequestMsgHdr</code> fields","ATTESTATION_REPORT format (AMD SEV-SNP spec. table 21)","","","Format for an ECDSA P-384 with SHA-384 signature (AMD …","MSG_REPORT_REQ payload format (AMD SEV-SNP spec. table 20)","MSG_REPORT_RSP payload format (AMD SEV-SNP spec. table 23)","Supported values for SnpReportResponse.status","","The <code>TCB_VERSION</code> contains the security version numbers of …","Size of the <code>SnpReportRequest.user_data</code>","Reserved","SHA-384 digest of the Author public key that certified the …","","","","","","","","","","","","","If <code>MaskChipId</code> is set to 0, Identifier unique to the chip as","","","","","","","","","","","","","The family ID provided at launch","31:2 - Reserved 1:0 - KEY_SEL. Selects which key to use …","Flags","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The guest SVN","Data provided by the hypervisor at launch","SHA-384 digest of the ID public key that signed the ID …","The image ID provided at launch","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the reserved field is clear","","The measurement calculated at launch","Information about the platform","CurrentTcb","The guest policy","R component of this signature","Version of the Microcode, SNP firmware, PSP and boot loader","The attestation report generated by firmware","Guest-provided data","Report ID of this guest","Report ID of this guest’s migration agent","Size in bytes of the report","Report TCB version used to derive the VCEK that signed …","Reserved","Reserved, must be zero","Reserved","Reserved and some more flags","Reserved, must be zero","S component of this signature","Signature of bytes 0h to 29Fh inclusive of this report","The signature algorithm used to sign this report","The status of the key derivation operation, see …","","","","","","","","","","","","","Take a slice and return a reference for Self","","","","","","","","","","","","","","Guest-provided data to be included in the attestation …","Validate the SnpReportResponse fields","Version number of this attestation report","The VMPL to put in the attestation report","The request VMPL for the attestation report","","","Request an extended VMPL0 attestation report to the PSP.","Request a regular VMPL0 attestation report to the PSP.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A simple Read-Write Lock (RWLock) that allows multiple …","A guard that provides read access to the data protected by …","A guard that provides exclusive write access to the data …","","","","","","","Composes a 64-bit value by combining the number of readers …","Reference to the protected data","Reference to the protected data (mutable)","An UnsafeCell for interior mutability","Allow reading the protected data through deref","","","Release the read lock","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This function allows multiple readers to access the data …","This function ensures exclusive access for a single writer …","Waits then locks the RWLock, returning a mutable pointer …","Creates a new <code>RWLock</code> instance with the provided initial …","Reference to the associated <code>AtomicU64</code> in the <code>RWLock</code>","Reference to the associated <code>AtomicU64</code> in the <code>RWLock</code>","An atomic 64-bit integer used for synchronization","Splits a 64-bit value into two parts: readers (low 32 …","","","","","","","","","","","Unlocks the RWLock, relinquishing access to the raw pointer","This function is used to wait until all readers have …","This function is used to wait until all writers have …","A lock guard obtained from a <code>SpinLock</code>. This lock guard …","A simple spinlock implementation for protecting concurrent …","","","","","This atomic counter is incremented each time a thread …","","This <code>UnsafeCell</code> is used to provide interior mutability of …","","Provides read-only access to the protected data","Provides mutable access to the protected data","Automatically releases the lock when the guard is dropped","","","Returns the argument unchanged.","Returns the argument unchanged.","","This counter represents the thread that currently holds …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Acquires the lock, providing access to the protected data.","Creates a new SpinLock instance with the specified initial …","","","","","This method tries to acquire the lock without blocking. If …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pagesize definitions","","PerCPU mappings level 3 index","Task mappings level 3 index","Level3 page-table index shared between all CPUs","","Size helpers","","","","","More size helpers","","","","","Base Address of shared memory region","PerCPU CAA mappings","End Address of per-cpu memory region","Region for PerCPU Stacks","Base Address for temporary mappings - used by page-table …","Start and End for PAGE_SIZEed temporary mappings","Start and End for PAGE_SIZEed temporary mappings","","","PerCPU VMSA mappings","Base address of task memory region","End address of task memory region","Kernel stack for a task","Base Address of shared memory region","Mapping range for shared stacks","","Stack address of the per-cpu init task","IST Stacks base address","DoubleFault IST stack base address","End of user memory address range","Start of user memory address range","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Represents possible errors that can occur during memory …","","","Struct representing information about an allocated memory …","","","Struct representing information about a compound memory …","","","Struct representing information about a file memory page.","","","Struct representing information about a free memory page.","The file page has an invalid virtual address.","The heap address is invalid.","The specified page order is invalid.","The provided page type is invalid.","The page frame number (PFN) is invalid.","Maximum order of page allocations (up to 128kb)","","Represents info about allocated and free pages in …","Memory region with its physical/virtual addresses, page …","","","","Out of memory error.","Enum representing different types of page information.","Represents a reference to a memory page, holding both …","Storage type of a memory page, including encoding and …","Enum representing the type of a memory page.","Static spinlock-protected instance of <code>MemoryRegion</code> …","","","Struct representing information about a reserved memory …","","","Static spinlock-protected instance of <code>SlabPageSlab</code> …","Represents a slab allocator for fixed-size objects.","","Represents common information shared among multiple slab …","Represents a slab memory page, used for efficient …","","Struct representing information about a slab memory page.","Represents a slab page for the <code>SlabPageSlab</code> allocator.","Represents a simple virtual-to-physical memory allocator (…","","","Add other <code>SlabPage</code>.","Allocates memory based on the specified layout.","","Allocates a slot in the slab.","","","Allocate a file page.","Allocates a file page with initial reference count.","Allocate a reference-counted file page.","Allocates a single memory page from the root memory region.","Allocates a single page.","Allocates multiple memory pages with a specified order …","Allocates pages with a specific order.","Allocates pages with a specific order and page information.","Allocates a specific page frame number (<code>pfn</code>) within a …","Allocate a slab page.","Allocates a slab page.","Allocate other slot, caller must make sure there’s at …","Allocate a zeroed page.","Allocates a zeroed page.","Returns a mutable reference to the underlying array …","Returns a reference to the underlying array representing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if a page frame number is valid.","","","","","","","","","","","","Clones the <code>PageRef</code> instance, obtaining a new reference to …","","","","","","","","","","","","","","","Finds the neighboring page frame number for a compound …","Deallocates memory based on the specified pointer and …","Deallocates a slab page, freeing the associated memory.","","","Deallocate a slot given its virtual address","Decodes a <code>FreeInfo</code> into a <code>PageStorageType</code>.","Decodes a <code>PageStorageType</code> into an <code>AllocatedInfo</code>.","Decodes a <code>PageStorageType</code> into a <code>SlabPageInfo</code>.","Decodes a <code>PageStorageType</code> into a <code>CompoundInfo</code>.","Decodes a <code>PageStorageType</code> into a <code>ReservedInfo</code>.","Decodes a <code>PageStorageType</code> into a <code>FileInfo</code>.","Decodes the index of the next page.","Decodes the order of the page.","Decodes the reference count.","Decodes the slab","","","","","","","Free the memory (destroy) the <code>SlabPage</code>","Drops the <code>PageRef</code> instance, decreasing the reference count …","Encodes the <code>FreeInfo</code> into a <code>PageStorageType</code>.","Encodes the <code>AllocatedInfo</code> into a <code>PageStorageType</code>.","Encodes the <code>SlabPageInfo</code> into a <code>PageStorageType</code>.","Encodes the <code>CompoundInfo</code> into a <code>PageStorageType</code>.","Encodes the <code>ReservedInfo</code> into a <code>PageStorageType</code>.","Encodes the <code>FileInfo</code> into a <code>PageStorageType</code>.","Encodes the index of the next page.","Encodes the order of the page.","Encodes the reference count.","Encodes the virtual address of the slab","Calculates the end virtual address of the memory region.","","","","","","","","","","","","","","","","","","","","","","","Finds an unused slab page and removes it from the slab.","Free the page at the given virtual address.","Frees a page based on its virtual address, determining the …","Frees a page of a specific order. If merging is …","Frees a raw page by updating the free list and marking it …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>PageStorageType</code> into <code>PageInfo</code>.","","Get the capacity of the <code>SlabPage</code>","","Gets a file page and increments its reference count.","","Gets the next available page frame number for a given …","Get the virtual address of the next <code>SlabPage</code>","Calculates the order of a given size for page allocation.","Gets the page frame number for a given virtual address.","Gets the virtual offset of a virtual address within the …","Grows the slab by allocating a new slab page.","","Initialize the <code>SlabPage</code>.","Initialize the <code>SlabCommon</code> with default values","Initializes the <code>SlabPageSlab</code>, allocating the first slab …","Initialize the <code>Slab</code> instance","Initializes a compound page with given page frame numbers …","Initializes memory by marking certain pages as reserved …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Marks a compound page and updates page information for …","Retrieve information about the root memory","Retrieves information about memory, including total and …","Merges two pages of the same order into a new compound …","Creates a new <code>PageStorageType</code> with the specified page type.","Creates a new <code>FileInfo</code> with the specified reference count.","Creates a new <code>MemoryRegion</code> with default values.","Creates a new <code>PageRef</code> instance with the given virtual and …","Creates a new <code>SlabPage</code> instance with default values.","","Creates a new <code>SlabPageSlab</code> with a default <code>SlabCommon</code>.","","Creates a new instance of <code>SvsmAllocator</code> with initialized …","Gets the next free page frame number from the free list.","Index of the next free page.","","","","Order of the free page.","","","","","Gets a mutable pointer to the page information for a given …","Gets a pointer to the page information for a given page …","Retrieves the page type from the <code>PageStorageType</code>.","","Returns the physical address of the memory page.","","Converts a physical address within this memory region to a …","Prints memory information based on the provided <code>MemInfo</code> …","","Releases a file page and decrements its reference count.","Reads page information for a given page frame number.","Reference count of the file page.","Refills the free page list for a given order.","Initializes the root memory region with the specified …","","Shrinks the slab by freeing unused slab pages.","","","","","","","","","Splits a page into two pages of the next lower order.","","","Converts <code>PageInfo</code> into a <code>PageStorageType</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to merge a given page with its neighboring page. …","","","","","","","","","","","","","","","","","","","","","Returns the virtual address of the memory page.","","Converts a virtual address to a physical address within …","Writes page information for a given page frame number.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The ending address of the ISA range.","The starting address of the ISA range.","Global memory map containing various memory regions.","Initializes the global memory map based on the provided …","Returns <code>true</code> if the provided physical address <code>paddr</code> is …","Returns <code>true</code> if the provided physical address <code>paddr</code> is …","","","","","","","","","","","","","","","","","","","","","","","","Sub-tree of a page table that can be populated at the …","","Represents a sub-tree of a page-table which can be mapped …","","","","","","Request physical base address of the page-table sub-tree. …","Get a flags value with all known bits set.","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","","","","","","","","","","The intersection of a source flags value with the …","","","","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","","","The top-level index this PageTablePart is populated at","","","Request PageTable index to populate this instance to","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","","","","","","Map a 2MiB page in the page table sub-tree","","","Map a 4KiB page in the page table sub-tree","","","","Returns the exclusive end of the physical address space.","Create a new PageTablePart and allocate a root page for …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","The root of the page-table sub-tree","The intersection of a source flags value with the …","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Unmaps a 2MiB page from the page table sub-tree","","","Unmaps a 4KiB page from the page table sub-tree","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The number of u64’s in the bitmap","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Contains base functionality for all <code>VirtualMapping</code> types …","Map view of a ramfs file into virtual memory","","Mapping to be used as a kernel stack. This maps a stack …","A single mapping of virtual memory in a virtual memory …","","Map physically contiguous memory","Virtual Memory Region","","Granularity of ranges mapped by [<code>struct VMR</code>]. The mapped …","Reserve a region of address space so that no other mapping …","Virtual mapping backed by allocated pages. This can be …","","Allocation for stack pages","<code>RawAllocMapping</code> used for memory allocation","Physical base address to map","Number of pages required in <code>pages</code>","End address of this range as virtual PFN (VirtAddr &gt;&gt; …","The flags to apply to the virtual mapping","Page-table flags to map pages","Number of guard pages to reserve address space for","Link for storing this instance in an RBTree","","Request physical address to map for a given offset","","","Pointer to the actual mapping It is protected by an RWLock …","Request the size of the virtual memory mapping","A vec containing references to mapped pages within the file","A vec containing references to PageFile allocations","[<code>struct PageTableParts</code>] needed to map this VMR into a …","","Request the PTEntryFlags used for this virtual memory …","<code>PTEntryFlags</code> global to all mappings in this region. This …","","The virtual memory range covered by this mapping It is …","The size of the mapping in bytes","Number of bytes to map","Size in bytes to reserve. Must be aligned to PAGE_SIZE","Start address of this range as virtual PFN (VirtAddr &gt;&gt; …","RBTree containing all [<code>struct VMM</code>] instances with valid …","","","Whether mapping is writable","","","","","","","","","","","","","","","","","","","","","","A single mapping of virtual memory in a virtual memory …","","Information required to resolve a page fault within a …","","","","","","","","","","","","","","","The flags to use to map the virtual memory page.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Handle a page fault that occurred on a virtual memory …","Handle a page fault that occurred on a virtual memory …","Indicates whether the mapping has any associated data.","Indicates whether the mapping has any associated data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Link for storing this instance in an RBTree","","","","Request physical address to map for a given offset","","Pointer to the actual mapping It is protected by an RWLock …","Request the size of the virtual memory mapping","","Create a new VMM instance with at a given address and …","","The physical address of a page that must be mapped to the …","Request the page size used for mappings","Request the page size used for mappings","","","Request the PTEntryFlags used for this virtual memory …","Request the mapped range","The virtual memory range covered by this mapping It is …","Request the mapped range as page frame numbers","Request whether the mapping is shared or private. Defaults …","Request whether the mapping is shared or private. Defaults …","","","","","","","","","","","","","","","Inform the virtual memory mapping about an offset being …","Inform the virtual memory mapping about an offset being …","","","","Read-only access to the file","Map view of a ramfs file into virtual memory","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","The flags to apply to the virtual mapping","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","Create a new [‘VMFileMapping’] for a file. The file …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","A vec containing references to mapped pages within the file","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The size of the mapping in bytes","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Mapping to be used as a kernel stack. This maps a stack …","Allocation for stack pages","","","","Returns the stack bounds of this kernel stack","","","Returns the argument unchanged.","Number of guard pages to reserve address space for","Calls <code>U::from(self)</code>.","","","Create a new <code>VMKernelStack</code> with the default size. This …","Create a new <code>VMKernelStack</code> with the default size, packed …","Create a new <code>VMKernelStack</code> with a given size. This …","","Returns the virtual address for the top of this kernel …","","","","","Map physically contiguous memory","Physical base address to map","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Initialize new instance of <code>VMPhysMem</code>","Initialize new <code>Mapping</code> with <code>VMPhysMem</code>","","Number of bytes to map","","","","","Whether mapping is writable","Contains base functionality for all <code>VirtualMapping</code> types …","Allocates a single backing page of type PageFile if the …","Allocates a full set of backing pages of type PageFile","","","Number of pages required in <code>pages</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Request physical address to map for a given offset","Request size of the mapping in bytes","Creates a new instance of RawAllocMapping","A vec containing references to PageFile allocations","Check if a page has been allocated","","","","Unmap call-back - currently nothing to do in this function","Reserve a region of address space so that no other mapping …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create new instance of VMReserved","Create new <code>Mapping</code> of <code>VMReserved</code>","","Size in bytes to reserve. Must be aligned to PAGE_SIZE","","","","","Virtual mapping backed by allocated pages. This can be …","<code>RawAllocMapping</code> used for memory allocation","","","","","Page-table flags to map pages","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create a new instance and allocate backing memory","Create a new <code>Mapping</code> of <code>VMalloc</code> and allocate backing memory","","","","","","Virtual Memory Region","","Granularity of ranges mapped by [<code>struct VMR</code>]. The mapped …","Allocated all <code>PageTablePart</code>s needed to map this region","","","","","","","Dump all <code>VMM</code> mappings in the RBTree. This function is …","End address of this range as virtual PFN (VirtAddr &gt;&gt; …","","","Returns the argument unchanged.","Returns the argument unchanged.","Notify the range that a page fault has occurred. This …","Initialize this <code>VMR</code> by calling <code>VMR::initialize_common</code> with …","Initialize this <code>VMR</code> by checking the <code>start</code> and <code>end</code> values …","Initialize this <code>VMR</code> by calling <code>VMR::initialize_common</code> with …","Inserts <code>VMM</code> into the virtual memory region. It searches …","Inserts <code>VMM</code> with the specified alignment. This method …","Inserts <code>VMM</code> at a specified virtual base address. This …","Inserts <code>VMM</code> into the virtual memory region. This method …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Map a <code>VMM</code> into the <code>PageTablePart</code>s of this region","Creates a new [<code>struct VMR</code>]","","[<code>struct PageTableParts</code>] needed to map this VMR into a …","Populate <code>PageTablePart</code>s of the <code>VMR</code> into a page-table","","<code>PTEntryFlags</code> global to all mappings in this region. This …","Removes the mapping from a given base address from the …","Start address of this range as virtual PFN (VirtAddr &gt;&gt; …","RBTree containing all [<code>struct VMM</code>] instances with valid …","","","","","","","Unmap a <code>VMM</code> from the <code>PageTablePart</code>s of this region","","","Returns the virtual start and end addresses for this region","","","","","","","","","","This defines a platform abstraction to permit the SVSM to …","","","","","","","","","","","","","","","","","","Performs basic early initialization of the runtime …","Performs initialization of the platform runtime …","Perform an EOI of the current interrupt.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Obtains a console I/O port reference.","Determines the paging encryption masks for the current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Marks a range of pages as invalid for use as private pages.","","","Performs a page state change between private and shared …","","","Establishes state required for guest/host communication.","Completes initialization of a per-CPU object during …","Completes initialization of a per-CPU object on the target …","","","","","","","","","","","","","","","Marks a range of pages as valid for use as private pages.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Marks a range of pages as invalid for use as private pages.","","","","","","","","","","Marks a range of pages as valid for use as private pages.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Marks a range of pages as invalid for use as private pages.","","","","","","","","","","Marks a range of pages as valid for use as private pages.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","vTPM protocol implementation (SVSM spec, chapter 8).","","","","","","","","","","","","","","","","","","","","","per-cpu request mapping area size (1GB)","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","vTPM platform commands (SVSM spec, section 8.1 - …","TPM_SEND_COMMAND request structure (SVSM spec, table 16)","TPM_SEND_COMMAND response structure (SVSM spec, table 17)","","","","","","","","","","","","","MSSIM platform command ID","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input buffer that contains the TPM command","Size of the input buffer","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Locality usage for the vTPM is not defined yet (must be …","Output buffer that will hold the command response","Size of the output buffer","","Write the response to the outbuf","","","","Send a TpmSendCommandRequest to the vTPM","","","","","","","","","","","","","","","","","","The SVSM Calling Area (CAA)","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns a copy of the this CAA with the <code>call_pending</code> field …","","","","","","","","Returns true if there is a valid VMSA mapping","A CAA with all of its fields set to zero.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Bits: 1..2","Creates a new default initialized bitfield.","Bits: 0..1","","","Bits: 7..8","Safety","","","Bits: 2..7","Bits: 1..2","Bits: 0..1","Bits: 7..8","Bits: 2..7","","","","","","","","","Bits: 1..2","Bits: 0..1","Bits: 7..8","Bits: 2..7","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","Check that we support the hypervisor’s advertised GHCB …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","The desired state of the page passed to PVALIDATE.","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","Executes the vmmcall instruction.","The intersection of a source flags value with the …","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the dr7 register to the given value","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Round-Robin scheduler implementation for COCONUT-SVSM","","","","","","","","","","","","","","","","Pointer to currently running task","Terminates the current task.","","","","ID of the task","Idle task - runs when there is no other runnable task","Check to see if the task scheduled on the current …","","","","Link to global task list","Page table that is loaded when the task is scheduled","","","","","","","","","Linked list with runable tasks","Link to scheduler run queue","State relevant for scheduler","","Perform a task switch and hand the CPU over to the next …","Initializes the RunQueue on the current CPU. It will …","","","","","Temporary storage for tasks which are about to be …","Task virtual memory range for use at CPL 0","Task virtual memory range for use at CPL 3 - None for …","","","","","Round-Robin scheduler implementation for COCONUT-SVSM","","Global task list This contains every task regardless of …","","","","","","","","Gets a pointer to the current task","Pointer to currently running task","","Terminates the current task.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Find the next task to run, which is either the task at the …","","Update state before a task is scheduled out. Non-idle …","Idle task - runs when there is no other runnable task","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check to see if the task scheduled on the current …","","","Create a new runqueue for an id. The id would normally be …","","Linked list with runable tasks","Perform a task switch and hand the CPU over to the next …","Initializes the RunQueue on the current CPU. It will …","Initialized the scheduler for this (RunQueue)RunQueue. …","Prepares a task switch. The function checks if a task …","","Sets the idle task for this RunQueue. This function sets a …","","","","","Temporary storage for tasks which are about to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CPU this task is currently assigned to","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","ID of the task","Whether this is an idle task","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Link to global task list","","","","","","","","","","","","Page table that is loaded when the task is scheduled","","","","","","","","","","","","Link to scheduler run queue","State relevant for scheduler","","","","","","","Current state of the task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Task virtual memory range for use at CPL 0","Task virtual memory range for use at CPL 3 - None for …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","VMPL level the guest OS will be executed at. Keep VMPL 1 …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Contains the error value","A memory location which is effectively immutable after …","","A reference to a memory location which is effectively …","","","","Contains the success value","","","","","","","","","","","","","Dereference the wrapped value. Must <strong>only ever</strong> get called …","Dereference the referenced value <em>without</em> lifetime …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Dereference the referenced value with lifetime …","","","Initialize an uninitialized <code>ImmutAfterInitCell</code> instance …","","Initialize an uninitialized <code>ImmutAfterInitRef</code> instance to …","Initialize an uninitialized <code>ImmutAfterInitRef</code> instance to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an initialized <code>ImmutAfterInitCell</code> instance from a …","Create an initialized <code>ImmutAfterInitRef</code> instance pointing …","Reinitialize an initialized <code>ImmutAfterInitCell</code> instance …","","","","","","","","","","","","","","Create an unitialized <code>ImmutAfterInitCell</code> instance. The …","Create an unitialized <code>ImmutAfterInitRef</code> instance. The …","An abstraction over a memory region, expressed in terms of …","","","Create a new memory region with overflow checks.","","","Check whether an address is within this region.","Check whether this region fully contains a different …","Checks whether two regions are contiguous or overlapping. …","The end address of the memory region.","","","Returns the argument unchanged.","Create a memory region from two raw addresses.","Calls <code>U::from(self)</code>.","Returns whether the region spans any actual memory.","Iterate over the addresses covering the memory region in …","The length of the memory region in bytes, originally set in","Merge two regions. It does not check whether the two …","Create a new memory region starting at address <code>start</code>, …","Checks whether two regions overlap. This does <em>not</em> include …","The base address of the memory region, originally set in …","","","","","","","","","","","","","","This implements one handler for each <code>TpmPlatformCommand</code> …","","Basic TPM driver services","Basic services required to perform the VTPM Protocol","Get the list of Platform Commands supported by the TPM …","Prepare the TPM to be used for the first time. At this …","Check if the TPM is powered on.","TPM 2.0 Reference Implementation by Microsoft This crate …","Send a command for the TPM to run in a given locality","In a system where the NV memory used by the TPM is not …","Power-on the TPM, which also triggers a reset","","Initialize the TPM by calling the init() implementation of …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Functions required to build the Microsoft TPM libraries …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,11,1,10,11,12,16,8,17,3,20,1,9,10,11,12,16,8,17,3,20,1,9,10,11,12,3,1,16,8,17,8,9,10,11,12,8,9,10,11,12,8,17,8,17,3,3,16,8,17,12,9,9,10,11,16,8,17,3,20,1,9,10,11,12,16,8,17,3,20,1,9,10,11,12,16,1,3,10,11,16,8,17,3,20,1,9,10,11,12,8,17,0,1,17,3,20,16,8,17,8,17,8,17,20,17,11,16,8,17,16,16,8,17,20,3,1,8,9,10,11,12,16,8,17,3,20,1,9,10,11,12,16,8,17,3,20,1,9,10,11,12,16,8,17,3,20,1,9,10,11,12,0,0,0,0,0,25,26,27,26,26,26,26,27,25,26,25,26,27,26,27,26,25,26,25,26,25,26,26,27,25,26,25,26,25,25,25,26,26,26,25,25,25,26,26,26,26,26,25,26,27,27,27,27,25,26,25,26,27,27,27,25,26,27,27,0,25,25,26,26,25,26,26,26,25,26,25,26,25,26,25,26,33,33,0,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,37,38,39,37,38,39,37,38,39,37,38,39,39,39,39,37,38,39,37,38,39,0,0,37,38,39,39,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,45,0,0,45,44,44,45,45,44,44,44,45,45,45,45,45,45,44,44,45,45,45,45,45,45,44,45,45,45,44,44,45,44,45,44,45,44,45,44,45,44,44,45,45,44,45,44,45,44,45,44,45,44,45,44,45,0,0,44,45,44,45,44,45,44,44,44,44,45,45,45,45,44,45,44,45,44,44,45,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,0,0,0,0,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,0,0,0,0,0,0,0,50,51,50,51,50,51,50,51,50,50,0,0,0,50,51,50,51,50,51,50,51,50,51,50,51,51,50,51,50,0,50,51,50,51,50,51,50,51,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,54,54,54,54,54,0,0,283,283,0,0,283,0,0,283,0,283,283,283,283,283,0,0,0,0,0,0,0,0,0,58,56,58,59,56,58,59,56,56,58,59,56,58,59,56,59,59,59,59,58,59,56,56,56,58,59,56,58,59,56,59,0,0,58,59,56,56,56,56,59,56,58,58,59,56,59,58,59,56,58,59,56,58,59,56,0,63,63,0,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,65,55,68,69,65,55,68,69,65,68,55,68,69,65,55,68,69,65,68,55,68,69,65,65,68,55,55,68,69,65,55,55,68,69,65,0,68,0,0,0,0,65,55,68,69,65,0,68,65,68,65,68,68,55,65,69,55,68,69,65,68,0,55,68,69,65,55,68,69,65,55,68,69,65,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,72,0,73,73,0,73,0,0,0,73,73,73,71,71,71,71,71,71,71,71,71,71,71,71,73,73,73,71,72,0,71,70,70,70,73,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,74,74,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,74,72,73,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,70,71,72,73,74,0,0,0,0,0,76,76,76,76,76,76,76,76,0,0,0,0,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,77,78,78,78,78,78,78,78,87,78,83,88,87,88,82,89,80,81,77,78,83,86,87,88,82,89,80,81,77,78,83,86,80,80,80,81,82,80,83,82,80,83,78,77,77,87,78,78,77,0,78,82,80,89,78,86,78,87,88,82,89,80,81,77,78,83,86,87,88,82,89,80,81,77,78,83,86,80,80,88,78,77,78,78,77,77,77,77,82,83,81,78,78,77,77,77,83,77,78,87,88,82,89,80,81,77,78,83,86,81,77,78,78,78,78,78,78,78,80,87,88,82,89,80,81,77,78,83,86,78,81,82,83,78,78,78,77,0,88,86,78,78,78,78,78,78,78,81,78,78,78,80,86,78,77,78,78,78,78,78,77,78,77,78,78,0,0,0,0,82,80,83,87,88,82,89,80,81,77,78,83,86,87,88,82,89,80,81,77,78,83,86,78,87,88,82,89,80,81,77,78,83,86,78,78,86,80,81,81,81,80,80,82,78,78,82,80,80,80,78,86,78,78,0,0,0,0,100,101,102,100,101,102,100,101,102,100,101,102,101,102,100,101,102,101,101,102,100,101,102,100,101,102,101,101,100,101,102,100,100,100,100,100,100,100,100,100,100,100,100,100,100,102,100,102,101,102,100,101,102,100,101,102,100,101,102,100,101,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,104,0,0,0,0,0,0,0,0,104,104,0,0,0,0,103,104,103,104,103,104,103,104,103,103,103,103,104,103,104,0,0,0,0,0,0,103,104,0,0,103,103,0,0,0,103,104,103,103,104,103,104,103,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,106,106,106,284,106,284,106,106,106,106,106,106,106,106,0,108,108,0,108,108,108,108,108,108,108,108,108,108,108,108,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,115,109,112,109,114,117,116,109,115,112,114,117,116,109,115,112,109,109,112,112,114,109,109,109,0,114,115,116,117,115,114,117,116,109,115,115,112,117,0,0,0,112,114,117,116,109,115,112,109,109,109,116,109,116,109,109,109,109,109,109,109,109,109,109,109,109,109,109,114,117,109,112,114,117,116,109,115,112,114,117,116,109,115,112,114,117,116,109,115,112,116,109,109,109,128,0,0,0,0,128,129,129,128,130,129,128,130,130,129,128,129,128,129,129,128,130,130,129,128,130,129,128,130,130,129,129,130,130,130,0,129,129,129,130,129,128,129,128,130,129,128,130,129,128,130,130,130,130,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,143,0,0,143,138,0,0,138,0,138,138,0,0,0,140,140,141,144,0,139,0,0,141,140,0,140,0,144,0,0,0,0,142,0,142,142,0,140,0,142,0,0,143,0,0,143,138,0,138,0,138,0,138,138,143,144,138,143,144,138,143,138,143,140,140,141,138,144,138,138,138,143,144,138,138,143,144,0,138,143,144,138,143,143,141,140,140,142,142,144,144,142,142,138,143,142,138,143,144,138,143,144,138,143,144,140,142,0,0,0,0,146,139,147,146,139,147,0,0,146,146,146,139,147,146,139,147,139,147,0,147,146,139,147,0,146,139,0,146,139,147,0,139,0,146,139,147,147,0,146,139,146,139,0,0,146,139,146,139,147,146,139,147,146,139,147,0,0,0,0,146,139,0,0,0,0,151,152,148,151,152,148,151,148,148,151,148,151,152,148,151,152,148,148,151,151,152,148,148,148,151,152,151,152,148,151,152,151,152,151,151,151,152,151,151,152,151,152,148,151,152,148,151,152,148,148,151,152,151,0,0,0,132,132,0,0,0,0,0,132,0,132,0,21,132,153,21,132,153,132,153,132,153,21,21,21,21,21,21,132,153,21,132,153,21,21,132,153,21,21,21,21,21,21,21,153,153,153,153,132,153,21,132,153,21,132,153,21,132,153,0,0,0,0,0,0,0,0,0,0,0,0,0,160,35,158,35,156,157,158,159,160,35,156,157,158,159,160,35,35,156,157,158,159,160,35,156,157,158,159,160,35,156,160,159,35,156,0,35,156,156,157,158,159,160,35,156,156,157,158,159,160,0,156,160,35,156,157,158,159,160,157,158,159,35,156,157,0,0,0,35,157,158,35,156,157,158,159,160,156,35,156,156,157,158,159,160,35,156,157,158,159,160,35,156,157,158,159,160,159,35,0,0,0,157,0,0,0,0,162,0,162,0,0,0,0,162,163,162,163,162,162,163,163,163,162,163,162,163,162,163,0,162,163,163,163,163,163,0,163,0,163,163,163,163,163,163,162,162,163,162,163,162,163,163,163,169,0,169,164,0,0,0,164,164,0,0,0,0,0,0,165,165,165,169,164,165,166,168,169,164,165,166,168,166,168,0,166,169,164,165,166,169,164,165,166,168,168,166,165,166,169,164,169,164,165,166,168,169,164,165,166,168,165,166,165,165,169,164,165,166,168,168,165,165,165,165,165,168,165,166,165,165,165,165,166,168,0,166,168,0,169,164,165,166,169,164,164,165,166,168,169,164,165,166,168,169,164,165,166,168,165,0,172,172,0,0,0,0,172,0,0,171,175,170,171,172,173,174,175,170,171,172,173,174,175,175,170,171,172,173,174,175,170,171,172,173,174,175,175,170,175,170,171,172,173,174,175,170,171,172,173,174,175,175,175,175,175,170,171,172,173,174,175,170,170,175,175,175,175,174,173,171,175,175,175,171,175,174,175,175,175,170,174,175,175,171,170,171,172,173,174,175,170,171,172,173,174,175,170,171,170,171,172,173,174,175,170,171,172,173,174,175,170,171,175,170,175,0,0,0,0,0,0,0,0,0,176,177,176,177,176,177,176,177,177,177,176,177,176,177,177,177,177,177,177,177,177,177,177,177,177,177,176,177,177,176,177,177,177,177,177,176,177,177,176,177,176,177,176,177,0,0,0,178,178,178,178,178,178,178,154,178,154,154,154,178,178,178,178,0,0,0,0,0,0,0,0,0,0,0,60,61,97,60,61,97,0,60,61,97,60,61,61,60,61,60,61,97,60,61,97,60,61,97,97,97,97,97,60,61,97,0,0,60,61,97,60,61,97,60,61,97,97,97,97,0,0,91,180,91,180,180,91,180,180,91,91,91,91,180,91,180,91,180,91,180,180,180,91,180,91,180,180,91,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,182,182,182,182,0,182,182,0,182,182,182,182,182,0,182,0,0,0,191,190,0,191,190,0,191,190,0,191,190,0,135,135,135,135,135,0,0,0,0,192,192,192,135,0,0,0,0,0,191,190,0,192,0,0,0,190,0,0,191,0,0,0,192,192,183,185,184,187,188,185,0,189,0,0,189,0,189,189,189,0,189,183,0,189,145,145,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,183,189,135,191,192,193,194,195,196,197,198,190,199,145,135,191,192,193,194,195,196,197,198,190,199,145,187,188,189,185,187,188,185,183,193,194,195,196,197,198,192,192,192,192,199,189,184,183,188,185,184,145,193,194,195,196,197,198,192,192,192,192,189,135,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,184,184,183,183,0,189,189,189,199,189,183,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,190,183,184,0,189,184,189,184,0,189,189,187,188,184,183,187,188,189,189,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,195,0,0,189,0,189,189,192,198,189,145,184,183,187,188,185,189,193,189,184,189,193,194,196,183,189,189,189,192,183,145,145,189,0,0,189,189,198,189,0,184,187,188,185,185,185,185,185,185,185,189,189,189,190,135,191,192,193,194,195,196,197,198,190,199,145,199,145,135,191,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,189,135,191,192,193,194,195,196,197,198,190,199,189,145,184,183,187,188,185,184,184,145,145,189,189,0,200,200,200,0,200,200,200,200,200,200,200,200,0,0,0,0,200,200,200,200,200,0,0,204,204,0,0,204,204,204,204,204,0,0,0,0,204,204,204,204,204,204,0,0,0,0,0,0,0,0,209,209,0,0,209,209,0,0,211,211,211,211,0,0,209,209,0,0,0,0,0,0,0,0,0,209,209,206,207,208,209,90,208,210,207,210,207,210,210,210,210,209,209,209,209,209,209,209,209,209,206,213,211,210,90,207,208,209,206,213,211,210,90,207,208,210,206,209,206,209,206,210,209,209,210,210,209,209,209,206,213,210,207,90,90,209,210,90,207,209,213,207,210,209,209,206,209,209,209,209,209,206,213,211,210,90,207,208,207,207,207,209,206,213,211,210,90,207,208,209,209,209,209,209,209,208,0,208,208,208,213,210,208,213,0,209,209,209,209,206,213,211,210,90,207,208,209,209,206,209,90,209,209,210,0,210,210,0,210,207,208,210,207,208,210,210,210,0,208,209,90,207,0,0,210,210,206,0,90,206,208,209,210,209,206,210,0,210,90,0,210,0,209,209,0,209,209,209,209,209,206,209,209,206,213,211,210,90,207,208,209,206,213,211,210,90,207,208,209,206,213,211,210,90,207,208,209,210,207,208,210,207,208,210,210,210,90,210,207,210,210,210,210,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,0,0,215,215,0,0,215,215,215,215,0,215,215,215,215,0,215,215,215,0,0,216,216,216,0,216,216,216,216,216,216,216,216,216,216,216,0,0,216,216,216,216,0,216,216,216,216,216,216,216,216,216,216,216,216,216,0,0,0,0,0,0,0,0,0,217,0,0,0,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,227,224,225,205,222,227,223,221,220,218,0,93,221,218,222,225,205,220,218,205,0,221,222,224,226,205,205,95,95,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,219,93,221,220,219,93,221,220,219,220,219,220,220,219,219,93,221,219,93,221,220,93,220,220,221,221,221,93,220,218,218,218,218,219,93,221,220,221,220,220,220,218,93,221,218,93,221,220,219,218,218,220,220,218,221,221,221,218,218,219,220,219,93,221,220,219,93,221,220,219,93,221,220,218,218,203,203,203,203,0,0,203,203,203,203,203,203,203,203,203,203,203,222,203,222,203,203,203,203,203,203,203,203,222,203,203,203,203,203,222,203,222,203,203,203,203,203,203,222,203,203,203,203,222,203,203,203,203,203,222,222,222,203,222,222,203,203,222,203,203,203,203,203,203,222,203,222,203,222,203,0,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,0,0,205,205,95,205,95,205,95,205,205,205,95,205,95,205,205,205,205,205,205,205,205,205,95,205,205,95,205,205,205,205,205,205,205,205,95,205,95,205,95,205,95,95,205,95,229,0,0,231,231,0,231,229,0,0,231,230,229,229,230,231,229,230,231,229,230,231,229,230,231,229,98,98,98,230,231,229,230,231,229,98,98,230,231,229,98,0,229,98,230,230,98,98,98,230,0,230,231,229,230,231,229,230,231,229,230,231,229,98,0,0,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,0,0,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,0,0,0,235,235,235,235,0,235,0,235,235,235,235,235,235,235,235,235,235,235,235,235,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,236,236,0,236,236,0,0,0,0,0,0,0,0,0,0,0,236,236,236,236,0,236,236,236,236,236,237,107,237,237,237,237,237,237,107,237,0,0,237,237,237,107,237,107,107,237,107,237,107,237,107,237,107,107,0,107,237,107,107,107,107,107,107,237,107,237,107,237,107,237,107,107,107,0,0,0,0,238,0,0,0,238,239,240,238,239,240,238,239,240,238,239,240,239,238,238,239,240,238,239,240,239,239,238,239,240,0,239,240,240,239,240,238,239,240,0,238,238,239,240,240,239,238,239,240,238,239,240,0,0,0,0,0,0,241,285,241,285,241,241,0,241,241,241,285,241,285,241,241,285,285,285,0,0,0,241,241,285,241,285,241,285,241,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,242,242,242,242,242,242,41,242,242,242,242,242,242,242,41,242,242,242,242,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,286,286,0,286,286,137,286,0,0,0,0,0,0,0,0,0,286,286,286,105,105,105,137,137,64,286,243,64,137,105,286,243,64,137,105,64,64,243,137,105,243,137,105,64,243,243,64,243,243,64,137,105,286,243,64,137,105,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,64,64,64,286,243,64,137,105,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,243,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,243,137,105,286,243,64,137,105,286,243,64,137,105,286,243,64,137,105,64,64,64,64,64,64,64,64,64,64,64,0,0,245,245,245,245,245,245,245,245,245,92,245,92,245,245,0,245,92,245,92,245,245,92,92,245,92,245,245,245,92,92,245,0,92,92,245,245,245,245,245,245,245,92,245,92,245,92,92,245,245,245,245,246,134,0,0,0,0,134,247,247,246,246,246,246,246,246,247,247,247,247,247,247,247,246,246,246,246,246,246,246,246,246,134,247,246,134,247,246,134,247,246,134,247,246,246,246,246,246,246,134,247,246,246,246,246,246,246,134,247,246,246,246,246,246,246,246,0,0,246,246,246,134,247,246,246,0,246,246,246,246,246,0,246,0,246,0,246,246,246,134,247,246,246,246,134,247,246,134,247,246,134,247,246,246,0,0,0,0,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,0,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,0,250,0,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,0,250,250,0,0,0,0,0,250,250,250,250,250,250,250,250,250,250,0,251,136,136,136,136,251,252,251,0,251,0,251,0,251,251,251,251,251,252,251,251,251,251,251,251,251,251,251,251,251,251,136,252,251,136,252,251,136,252,136,252,251,251,251,251,136,252,251,136,136,252,251,251,251,251,136,252,251,251,251,251,251,251,251,0,251,251,251,136,252,251,251,251,251,251,251,251,0,0,0,0,0,251,136,0,0,0,0,0,251,0,251,251,251,136,252,136,251,136,252,251,136,252,251,136,252,251,251,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,0,287,287,287,287,0,287,0,0,287,287,287,287,0,0,0,0,0,262,131,0,131,262,0,0,0,262,0,0,0,0,0,0,0,0,85,0,0,0,96,0,0,0,113,261,96,0,0,263,259,261,261,85,263,259,85,113,113,261,113,96,261,261,0,0,0,0,261,0,0,96,261,261,266,0,0,0,0,0,0,96,258,96,258,0,0,0,96,96,96,0,96,258,96,258,96,258,96,258,96,96,96,258,0,258,258,96,258,96,0,0,96,96,0,96,0,0,0,258,96,96,258,96,258,96,258,262,131,0,263,259,131,262,0,0,262,0,0,0,0,0,0,0,0,0,85,261,261,261,265,261,262,131,264,113,263,259,265,261,262,131,264,113,263,259,262,131,113,263,259,262,131,113,263,259,265,261,261,262,264,113,263,259,261,262,261,113,261,262,131,264,113,265,261,262,131,264,113,263,259,263,259,261,263,259,261,261,265,265,261,262,131,264,113,263,259,261,261,0,261,263,259,263,259,263,259,261,261,261,261,261,261,261,264,263,259,264,264,261,265,85,263,259,263,259,85,113,113,261,113,261,261,261,261,261,261,261,261,265,0,262,131,113,263,259,265,261,262,131,264,113,263,259,265,261,262,131,264,113,263,259,265,261,262,131,264,113,263,259,261,261,261,0,266,266,266,266,266,266,266,266,266,266,266,266,266,0,212,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,212,212,212,212,212,212,212,212,212,212,212,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,267,268,269,0,288,268,269,268,269,268,269,267,268,269,288,269,268,269,268,269,268,269,267,268,269,268,269,267,268,269,268,269,267,268,269,268,269,268,269,267,268,269,267,268,269,268,269,268,269,268,269,268,269,267,268,269,272,42,0,0,0,0,0,272,42,272,272,271,273,272,271,273,271,271,271,272,272,271,273,272,271,273,272,271,273,273,271,0,271,271,273,273,272,271,273,271,273,271,271,271,272,272,271,273,271,272,271,273,272,271,273,271,273,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,275,276,276,0,277,277,277,0,0,0,0,0,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,0,0,0,0,0,0,0],"f":"`````````````````````````````````````````````{{bd}{{h{f}}}}``{{bj}{{n{fl}}}}```{ce{}{}}0000000000000000000`````{A`A`}{AbAb}{AdAd}{AfAf}{AhAh}{{ce}Aj{}{}}0000````{f{{h{{An{Al}}}}}}{{fj}h}{{}B`}{{}A`}{{}Bb}`````{{B`Bd}Bf}{{A`Bd}Bf}{{BbBd}Bf}{{fBd}Bf}{{BhBd}Bf}{{bBd}Bf}{{AbBd}Bf}{{AdBd}Bf}{{AfBd}Bf}{{AhBd}Bf}{cc{}}000000000{Bj{{n{B`l}}}}{Bj{{n{bl}}}}```{ce{}{}}000000000``{Bj{{n{{Bl{Ah}}l}}}}{{bBj}{{n{Ajl}}}}{A`Bb}{{{An{Al}}}{{n{fl}}}}{{A`j}Bh}````````{BbAj}`````````{fBn}`77777{c{{n{e}}}{}{}}0000000000000000000{cC`{}}000000000`````{{Cbj}Cb}{{Cdj}Cd}{{Cfj}Cf}{Cd{{h{c}}}{}}0{Cd}0{Cfj}????{{Cfj}{{h{Cf}}}}{{Cdj}{{h{Cd}}}}10{CbCb}{CdCd}{{ce}Aj{}{}}0{{CbCb}Ch}{{CdCd}Ch};{{Cfj}Cj}{{}Cb}{{}Cd}{{CbCb}Cj}{{CdCd}Cj}{{CbBd}Bf}00{{CdBd}Bf}00{jCb}{ClCb}{cc{}}70{ClCd}8{jCd}{ce{}{}}0<{CfCj}0062<;{CfCf}0{Cfj}{{CbCb}{{h{Ch}}}}{{CdCd}{{h{Ch}}}}2{{Cfj}Cf}{jj}{{Cbj}Cb}{{CbCb}c{}}{{Cdj}Cd}{{CdCd}c{}};;{Cdj}{{Cdj}{{An{c}}}{}}{cCn{}}0{c{{n{e}}}{}{}}000{cC`{}}0```{ce{}{}}0{{{An{{D`{Cb}}}}{D`{Cb}}}Aj}{DbDd}{Db{{n{{D`{Cb}}l}}}}{{DbBd}Bf}{cc{}}{DbCj}{DbCl}{Db{{h{Df}}}}{{Db{D`{Cb}}}{{Bl{{D`{Cb}}}}}}{Db{{n{{Bl{{D`{Cb}}}}l}}}}3{{DbDh}{{n{Ajl}}}};5{Db{{n{{Bl{Ah}}l}}}}6{Dbj}7??>``````======{DjDj}{DlDl}{DnDn}{{ce}Aj{}{}}00`{{DnE`}Cj}{DnAj}{{DjBd}Bf}{{DlBd}Bf}{{DnBd}Bf}{cc{}}00{Eb{{Ed{Aj}}}}{d{{Ed{Aj}}}}{ce{}{}}00{{DnEf}Aj}`{dDn}222{c{{n{e}}}{}{}}00000{cC`{}}00{{Djd}Bf}````````````````````````````````````````````````````````{{}Eh}{{}Ej}{{EhEh}Eh}{{EjEj}Ej}{{EhEh}Aj}{{EjEj}Aj}3210{EhCl}0{EjCl}05432===={EhEh}{EjEj}{{EhEh}Cj}{{EjEj}Cj}{{}Aj}0:9<;{{Ehc}Aj{{En{}{{El{Eh}}}}}}{{Ejc}Aj{{En{}{{El{Ej}}}}}}{{EhBd}Bf}000{{EjBd}Bf}000{cc{}}0{Cl{{h{Eh}}}}{Cl{{h{Ej}}}}{ClEh}0{ClEj}010{cEh{{En{}{{El{Eh}}}}}}{cEj{{En{}{{El{Ej}}}}}}{d{{h{Eh}}}}{d{{h{Ej}}}}{{EhEh}Aj}{{EjEj}Aj}{{EhEh}Eh}{{EjEj}Ej}{{EhEh}Cj}{{EjEj}Cj}{ce{}{}}0{Ehc{}}{Ejc{}}{EhCj}{EjCj}10{Eh{{F`{Eh}}}}{Ej{{F`{Ej}}}}{Eh{{Fb{Eh}}}}{Ej{{Fb{Ej}}}}{EhEh}{EjEj}{{}Eh}{{}j}{{}Cb}{{}Ej}{{EhEh}Aj}{{EjEj}Aj}{{EhEhCj}Aj}{{EjEjCj}Aj}{{EhEh}Eh}{{EjEj}Ej}541054{c{{n{e}}}{}{}}000{cC`{}}032{EhAj}{jAj}{CbAj}{EjAj}```{ce{}{}}000{FdFd}{FfFf}{{ce}Aj{}{}}0``{Fh{{h{Ff}}}}{{FhFhClCl}{{h{Ff}}}}{{}Aj}````````{{FdBd}Bf}{{FfBd}Bf}{cc{}}0{{FhFh}Ff}::{{FhFh}Fd}{FjAj}<<{c{{n{e}}}{}{}}000{cC`{}}0````````````{{}Fl}{{FlFl}Fl}{{FlFl}Aj}10{FlCl}021{ce{}{}}0{FlFl}{{FlFl}Cj}5?6{{Flc}Aj{{En{}{{El{Fl}}}}}}{{FlBd}Bf}000>{Cl{{h{Fl}}}}{ClFl}00{cFl{{En{}{{El{Fl}}}}}}{d{{h{Fl}}}}:;68{Flc{}}{FlCj}0{Fl{{F`{Fl}}}}{Fl{{Fb{Fl}}}};{{}Fl}?{{FlFlCj}Aj}{{FlFl}Fl}{{FlFl}Aj}10{c{{n{e}}}{}{}}0{cC`{}}3{FlAj}`{ce{}{}}0{CdCd}{{}Aj}```{cc{}}{FnCj}4`776``{{}Cj}0``````{G`{{Gb{ClFh}}}}666666{G`Aj}{GdGd}{GfGf}{G`G`}{{ce}Aj{}{}}00{{}Gf}000{{}Gd}1{{}G`}{G`Gd}`{{GdBd}Bf}{{GfBd}Bf}{{G`Bd}Bf}???{ClGf}{{}{{Gh{G`}}}}{{}{{Gj{G`}}}}{ce{}{}}00?{{G`Gl}Aj}9;{{G`GfGf}Aj}`222{GfCl}{c{{n{e}}}{}{}}00000{cC`{}}00`55{{}Gn}{GnH`}0{{GnBd}Bf}{cc{}}`9554`````````````````````````````````````````````````````{Hb{{Gb{ClFh}}}}::::::::{{{Hf{}{{Hd{Aj}}}}}Hh}{FnFn}{HhHh}{HjHj}{HbHb}{{ce}Aj{}{}}000{{CdDdAlAlAl}Hh}{{}Fn}{{}Hh}{{}Hj}{{}Hb}`:`{{FnBd}Bf}{{HhBd}Bf}{{HjBd}Bf}{{HbBd}Bf}`{cc{}}000``{{}{{Gh{Hb}}}}{AlCl}{{}{{Gj{Hb}}}}1{{HbAlj}Hb}{ce{}{}}000{CdCj}{{{Hf{}{{Hd{Aj}}}}Al}Hh}{HbHb}`=?{CdHh}`{{HbjHh}Hb}`5555{{{Hf{}{{Hd{Aj}}}}}Hh}{{}Aj}{c{{n{e}}}{}{}}0000000{cC`{}}0003{FnCj}33{{Fnj}Aj}0``````````````````````````{jAj}`5{FnAj}000220266`````````````````````````````````````=========={HlHl}{HnHn}{I`I`}{IbIb}{IdId}{{ce}Aj{}{}}0000{Id{{n{Ibl}}}}{{}Id}{{HlHl}Cj}{{HnHn}Cj}{{I`I`}Cj}{{IbIb}Cj}{{IdId}Cj}{{HlBd}Bf}{{HnBd}Bf}{{I`Bd}Bf}{{IbBd}Bf}{{IdBd}Bf}{cc{}}0000{ce{}{}}0000{{{If{Al}}}Id}{{}I`}{Ibj}33333{c{{n{e}}}{}{}}000000000{cC`{}}0000`````55{IhIh}{{ce}Aj{}{}}{{IhBd}Bf}98`{{}Cl}{{}Ih}1{FhCl}`;776{{FhCl}Aj}````````````{Fh{{n{Ijl}}}}{Fh{{n{{In{Il}}l}}}}{Il{{n{Ajl}}}}0000{{IlCd}{{n{Cdl}}}}````{ce{}{}}0000000000000000000`{J`{{h{Cd}}}}{J`{{h{Cb}}}}{{JbCb}Aj}{JdJd}{J`J`}{JfJf}{{ce}Aj{}{}}009{Ij{{Jh{Il}}}}{Ij{{In{Il}}}}`{IlIj}``{{}Jj}{IlJj}{{}Jd}{{}J`}`{IlAj}{{JlCb}Cj}1{{JnBd}Bf}{{K`Bd}Bf}{{JdBd}Bf}{{KbBd}Bf}{{J`Bd}Bf}{{JbBd}Bf}{{IjBd}Bf}{{IlBd}Bf}{{JfBd}Bf}{{JlBd}Bf}{cc{}}000000000``{{K`Fh}{{h{Jb}}}}{IlFh}{Ij{{D`{Cd}}}}{Il{{Kf{Kd}}}}{Il{{h{Jd}}}}{IjCd}0`{IjH`}```{Il{{Kf{J`}}}}{{IlCdCj}{{n{Ajl}}}}`{Ijj}{IjKh}``{Il{{n{Ajl}}}}{ce{}{}}000000000{JbCj}`{IlAj}00{{IlCb}{{n{Ajl}}}}044{J`Cj}{{FhJb}Jn}{{}K`}{{CdCbCj}Jd}{{}Kb}{{}J`}{{}Jb}{{FhIj}Ij}{{FhIj}Il}{{CbFhCj}Jf}{{}Jl}{{Il{Kl{Kj}}}{{n{Knl}}}}````{{IlKd}Aj}{{IlCl}Aj}`{{}Aj}{{K`Jn}Aj}{{JlCbFhCj}{{n{Ajl}}}}{Il{{n{Ajl}}}}``{Il{{Lb{L`}}}}`{IlJj}{Il{{h{{Gb{JjJj}}}}}}{JbAj}98{{IlCd}Aj}{J`Aj}{{JlCb}{{h{Fh}}}}{{IlLd}{{n{Ajl}}}}{Ij{{n{Ajl}}}}99{{Il{Hf{}{{Hd{Aj}}}}}{{n{Ajl}}}}2{IlAj}{IjJb}{IlJb}`=`{{}{{Jh{Il}}}}{{}{{In{Il}}}}{{}Jb}{{}Ij}{ce{}{}}00{c{{n{e}}}{}{}}0000000000000000000`{cC`{}}00000000099{{JlCbCj}{{n{JfCl}}}}{{J`{h{Cb}}}Aj}{{JbCb}Aj}0{{JbCbCb}Aj}2{{J`{h{Cb}}{h{Cb}}}Aj}`>`{JdDh}{J`Dh}`{J`{{h{Cb}}}}{IlLf}```{{}Aj}```<<<<<<{LhLh}{LjLj}{LlLl}{{ce}Aj{}{}}00``{{}Lh}{{}Lj}{{}Ll}```{{LhBd}Bf}{{LjBd}Bf}{{LlBd}Bf}{cc{}}00``{ce{}{}}00```````````````````000{c{{n{e}}}{}{}}00000{cC`{}}00>>{{LdFhCl}Aj}{{Ld{An{Ah}}Cl}Aj}```{{ClClCl}Aj}{{}Aj}{CdAj}01111````77{GlGl}{{ce}Aj{}{}}{{}Gl}{{GlBd}Bf}<;``1````{Gl{{Gb{GfGf}}}}<;;:```````````````<<<<{LnLn}{M`M`}55``{{LnBd}Bf}0{{M`Bd}Bf}{cc{}}0{LhCl}{Fn{{n{Ajl}}}}{{FnH`Ib}{{n{Ajl}}}}01{{Fnj}{{n{Ajl}}}}{ce{}{}}0{{H`DdMb}{{n{jl}}}}{{I`Fn}Dd}{{FnM`}Ln}`66633{cCn{}}{c{{n{e}}}{}{}}000{cC`{}}0{Fn{{n{{h{Ib}}l}}}}{jCj}{{Fn{h{Ib}}}Aj}{{DhCl}Aj}0{ClLf}{{}Lf}{DdLf}1111{CdDh}0```````>>{MdMd}{{ce}Aj{}{}}{{{If{Al}}{If{Al}}{An{Al}}{An{Al}}{An{Al}}}{{n{jMf}}}}000{{MdBd}Bf}{cc{}}{ce{}{}}0??>```{{Mh{If{Al}}{If{Al}}{An{Al}}{An{Al}}{An{Al}}}{{n{jMf}}}}11{MhMh}6{{MhMh}Cj}{{MhBd}Bf}544{c{{n{e}}}{}{}}0{cC`{}}`````````````````````{Mj{{Ml{CjMj}}}}`{Mj{{Mn{ce}}}{}{}}888888888888`{Mj{{n{Ajc}}}{}}{N`N`}>`{Mj{{h{Nb}}}}`0{{}Aj}{NdAj}{{NfNf}Cj}{Nh{{n{Ajc}}}{}}{{NjBd}Bf}{{NfBd}Bf}{cc{}}000{jNf}11`{{}{{n{AjCl}}}}{{Fnj}Aj}{{NbNf{Kf{{h{Nj}}}}}Aj}`{ce{}{}}00000{{Mjj}Cj}`{{MjNl}{{n{Ajc}}}{}}{{}Nh}{{}Mj}{Nh{{n{Ald}}}}{{Mj{An{Al}}Nn}{{Ml{AjMj}}}}{{MjNn}{{Ml{AjMj}}}}{Mj{{Ml{CjMj}}}}{Mj{{n{Ajc}}}{}}{{MjNb}Aj}{{MjNn{h{O`}}}{{n{Ajc}}}{}}0{Mj{{h{{Ob{Mj}}}}}}{Mj{{h{{Od{Mj}}}}}}{Mj{{h{{Of{Mj}}}}}}{Mj{{h{{Oh{Mj}}}}}}{Mj{{h{{Oj{Mj}}}}}}{Mj{{h{{Ol{Mj}}}}}}{Mj{{h{{On{Mj}}}}}}{FhNd}`{{MjNn{An{Al}}}{{n{jc}}}{}}{ce{}{}}{c{{n{e}}}{}{}}00000000000{cC`{}}00000{{NhAl}{{n{Ajc}}}{}}{{Mj{An{Al}}Nn}{{Ml{AjMj}}}}{{CdAl}{{n{Ajl}}}}{{MjNn}{{Ml{AjMj}}}}```````666666{{CdCdCd{If{{D`{Cd}}}}}A`}{AbAb}{A`A`}{{ce}Aj{}{}}0{{}Ab}{{AbBd}Bf}{{A`Bd}Bf}{{AdBd}Bf}{CdCj}{cc{}}00{ce{}{}}000``{{Cd{If{{D`{Cd}}}}}Ad}{Ad{{h{c}}}{}}`{jAj}````33{c{{n{e}}}{}{}}00000{cC`{}}00{{Cd{If{{D`{Cd}}}}}A`}0{{}Ad}````````````````77{ll}?{{lBd}Bf}{Afl}{Ahl}{Ajl}={All}{Anl}{AA`l}{AAbl}{Lnl}{AAdl}{ce{}{}}0??>``````````````{d{{n{AAfl}}}}0{{AAhAAj}{{n{{Kl{AAh}}l}}}}{{AAhAAj}{{n{{Kl{AAl}}l}}}}`````{{}Aj}`{AAh{{Bl{AAj}}}}{d{{n{{Bl{AAj}}l}}}}{{AAhAAj}{{n{AAnl}}}}{d{{n{Ajl}}}}`7{{ClCl}{{n{Ajl}}}}`{{AAf{An{Al}}}{{n{jl}}}}{{AAl{An{Al}}j}{{n{jl}}}}{{AAfj}Aj}{AAlj}{{AAlj}{{n{jl}}}}6{{AAhAAj}{{n{Ajl}}}}54`````````````??????{AAdAAd}{AAnAAn}{{ce}Aj{}{}}0{{AAhAAj}{{n{{Kl{AAh}}l}}}}{{AAhAAj}{{n{{Kl{AAl}}l}}}}`{{}AAd}`00{{AAdBd}Bf}{{AAnBd}Bf}{{AB`Bd}Bf}{cc{}}{AjAAd}11`{ce{}{}}006{AAnCj}0`{AAh{{Bl{AAj}}}}{{AAhAAj}{{n{AAnl}}}}{{AAlj}{{h{ABb}}}}0`{{AAjAAn}AB`}{{AAl{An{Al}}j}{{n{jl}}}}{AAlj}77{{AAlj}{{n{jl}}}}{c{{n{e}}}{}{}}00000{cC`{}}00{{AAhAAj}{{n{Ajl}}}}5````;;;;;;{d{{n{AAfl}}}}0``{{ABdBd}Bf}{{AAfBd}Bf}{{ABfBd}Bf}{cc{}}00`{{ABf{Kl{ABh}}}Aj}{{}Aj}{ABfCj}{ce{}{}}00{d{{n{{Bl{AAj}}l}}}}{{ABdj}{{h{ABb}}}}{{AAfj}{{h{ABb}}}}{d{{n{Ajl}}}}{{{Kl{AAl}}}ABd}{{{Kl{AAl}}}AAf}{{}ABf}?{AAfj}{{AAf{An{Al}}}{{n{jl}}}}{{ABd{An{Al}}}{{n{jl}}}}1`{ABf{{Kl{AAh}}}}{{AAfj}Aj}{{ABdj}Aj}1{ABdj}6{d{{n{{`{{ABj{}{{El{d}}}}}}l}}}}{d{{`{{ABj{}{{El{d}}}}}}}}{{ABdj}{{n{jl}}}}{{AAfj}{{n{jl}}}}{c{{n{e}}}{}{}}00000{cC`{}}00{d{{n{Ajl}}}}{c{{n{{Kl{AAh}}l}}}{{ABl{}{{El{d}}}}}}0=<={{ClCl}{{n{Ajl}}}}```{ce{}{}}00000`{{ABhAAj}{{n{{Kl{AAh}}l}}}}{{ABhAAj}{{n{{Kl{AAl}}l}}}}{{}ABn}`{{ABnBd}Bf}{{AC`Bd}Bf}{{ABhBd}Bf}{cc{}}00{{ABhAAj}Cj}{ABn{{n{Ajl}}}}999{ABh{{Bl{AAj}}}}{{ABhAAj}{{n{AAnl}}}}{{ABnj}{{h{ABb}}}}{{AC`j}{{h{ABb}}}}:{{}AC`}{{}ABh}``{{ABn{An{Al}}j}{{n{jl}}}}{{AC`{An{Al}}j}{{n{jl}}}}{{ABn{An{Al}}j}Aj}{{ABnj}{{n{Ajl}}}}{ABnj}{AC`j}`{{ABnj}{{n{jl}}}}{{AC`j}{{n{jl}}}}{c{{n{e}}}{}{}}00000{cC`{}}00{{ABhAAj}{{n{Ajl}}}}:98``````````````{ce{}{}}00000{AhAh}{ACbACb}{{ce}Aj{}{}}0`{{Bjd}{{n{ACbl}}}}{Bj{{n{{D`{Cb}}l}}}}00{{BjBd}Bf}{{AhBd}Bf}{{ACbBd}Bf}{cc{}}00{Bj{{n{{Bl{{D`{Cb}}}}l}}}}:::{Bj{{`{{ABl{}{{El{{D`{Cb}}}}}}}}}}{ACdBj}{Bjc{}}{BjACf}1{Bj{{D`{Cb}}}}{{BjDd}Aj}{ACbDd}`{ACbFh}`{ce{}{}}0{c{{n{e}}}{}{}}00000{cC`{}}00``````````````{{DfCbj}Aj}`333333333333`{DfDf}{AChACh}{ACjACj}{AClACl}{ACnACn}{AD`AD`}{{ce}Aj{}{}}00000```{ACn{{h{j}}}}{{}Df}{{AChACh}Cj}{{ACh{An{Al}}}{{h{{An{Al}}}}}}{{DfBd}Bf}{{AChBd}Bf}0{{ACjBd}Bf}{{AClBd}Bf}{{ACnBd}Bf}{{AD`Bd}Bf}{cc{}}{{{If{Al}}}ACh}11111{ACf{{n{All}}}}{d{{n{AChc}}}{}}`{ce{}{}}00000```={{}ACh}`{{{An{Al}}}{{n{Dfl}}}}{{DfAD`{An{Al}}}{{n{Ajl}}}}{DfAj}```444444{cCn{}}{c{{n{e}}}{}{}}{{{An{Al}}}{{n{AChc}}}{}}11111111111{cC`{}}00000``{{Db{D`{Cb}}}{{n{Ajl}}}}{{DbDfADb}{{n{Ajl}}}}{{Db{Bl{{D`{Cb}}}}}{{n{Ajl}}}}````````````;;;;{ADdADd}{{ce}Aj{}{}}{{ADfClADh{An{Al}}}{{n{jMf}}}}{ADfAj}{{ADfADhCl{An{Al}}j}{{n{AjMf}}}}{{ADdADd}Cj}`{{ADdBd}Bf}{{ADfBd}Bf}{cc{}}0{{}Aj}{ce{}{}}0{{}{{n{ADfMf}}}}``{{ADfADd}{{n{AjMf}}}}{{ADh{An{Al}}j{An{Al}}}{{n{jMf}}}}{{ADfADh{An{Al}}j{An{Al}}}{{n{jMf}}}}{{ADh{An{Al}}j}{{n{jMf}}}}{{ADfADh{An{Al}}j}{{n{jMf}}}}{{ADfADdADh{An{Al}}j}{{n{jMf}}}}>{ADfCl}{{ADfj}{{n{AjMf}}}}`9{c{{n{e}}}{}{}}000{cC`{}}0``````````````````{ADj{{An{Al}}}}`<<<<<<<<<<{{}{{n{{ADn{ADl}}Mf}}}}{{}{{n{{ADn{AE`}}Mf}}}}{Cl{{If{Al}}}}{ADlAj}{AEbAEb}{ADhADh}{ADjADj}{ADlADl}{{ce}Aj{}{}}000{{AE`{An{Al}}}{{n{AjMf}}}}`{{ADlADhCl{If{Al}}{An{Al}}}{{n{jMf}}}}{{}ADj}{{ADlADhCl{If{Al}}{An{Al}}}{{n{AjMf}}}}{{AEbAEb}Cj}{{ADhADh}Cj}{{AEbBd}Bf}{{ADhBd}Bf}{{ADjBd}Bf}{{ADlBd}Bf}{{AE`Bd}Bf}{cc{}}0000{ADj{{An{Al}}}}```{ce{}{}}0000{{AE`j}{{n{CjMf}}}}`````{{AE`j}{{n{AjMf}}}}{{DdADhCl}ADj}````{{ADj{An{Al}}}{{n{AjMf}}}}{ADl{{n{AjMf}}}}{AE`{{n{AjMf}}}}{{{D`{Cd}}}{{n{AjMf}}}}2107777{c{{n{e}}}{}{}}{Al{{n{ADhc}}}{}}111111111{cC`{}}0000{{ADjADhCl}{{n{AjMf}}}}````````````;;;;;;;;;;;;`{AEdAEd}{AEfAEf}{AEhAEh}{AEjAEj}{AElAEl}{AEnAEn}{{ce}Aj{}{}}00000```{{AEdBd}Bf}{{AEfBd}Bf}{{AEhBd}Bf}{{AEjBd}Bf}{{AElBd}Bf}{{AEnBd}Bf}{cc{}}00000````{ce{}{}}00000{AEdCj}0`````````````````````111111{c{{n{e}}}{}{}}00000{{{An{Al}}}{{n{AEdMf}}}}{{{An{Al}}}{{n{AEfMf}}}}222222{cC`{}}00000`{AEf{{n{AjMf}}}}`````{{{An{Al}}{An{Al}}}{{n{jMf}}}}{{{An{Al}}}{{n{jMf}}}}{{{An{Al}}{h{{An{Al}}}}}{{n{jMf}}}}````9999{AF`AF`}{AFbAFb}{{ce}Aj{}{}}0{AFbDd}{AFb{{n{{D`{Cb}}l}}}}{{AF`Bd}Bf}{{AFbBd}Bf}{cc{}}0{AFbCj}{AFbCl}{AFb{{h{Df}}}}{AFb{{Bl{{D`{Cb}}}}}}{AFb{{n{{Bl{{D`{Cb}}}}l}}}}33````{{AFbDh}{{n{Ajl}}}}{ce{}{}}0{AFb{{n{{Bl{Ah}}l}}}}`{Cd{{n{AFbl}}}}8{AFbj}9033{Cd{{n{cl}}}{}}{c{{n{e}}}{}{}}000{cC`{}}0```66{AFdAFd}{{ce}Aj{}{}}{{}AFd}{{AFdBd}Bf}{cc{}}{{ACdDd}Al}<{{ACdDd}Dd}{{ACdDdAl}Aj}{{ACdDdDd}Aj}?::9{ADb{{D`{Cb}}}}``````````{ce{}{}}00000{{ClCl}Cl}```{{{Gh{c}}}c{}}{{{Gj{c}}}c{}}0{{{Gh{c}}}Aj{}}{{{Gj{c}}}Aj{}}{{{Gh{c}}Bd}BfAFf}{{{Gj{c}}Bd}BfAFf}{{{Lb{c}}Bd}BfAFf}>>>888{{{Lb{c}}}{{Gh{c}}}{}}{{{Lb{c}}}{{Gj{c}}}{}}{{{Lb{c}}}{}{}}{c{{Lb{c}}}{}}```{Cl{{Gb{ClCl}}}}`{c{{n{e}}}{}{}}00000{cC`{}}00{{{Lb{c}}}Aj{}}{{{Lb{c}}}Cl{}}0``{ce{}{}}000```{{}{{AFh{c}}}AFj}{{{Kf{c}}}c{}}0{{{Kf{c}}}Aj{}}{{{Kf{c}}Bd}BfAFf}{{{AFh{c}}Bd}BfAFf}{cc{}}0``66{{{AFh{c}}}{{Kf{c}}}{}}{c{{AFh{c}}}{}}<<<<{{{AFh{c}}}{{h{{Kf{c}}}}}{}}<<```````````````````````````````````````````````````````````````99{AFlAFl}{{ce}Aj{}{}}5{{CdCdCb}Aj}<`{CbCd}={c{{n{e}}}{}{}}0{cC`{}}`{jCd}`{CdCb}````````````````````````````````````````````````{{AFnAG`}Aj}{{AGbAGd}Al}{AG`{{n{CdAn}}}}{AGf{{n{AG`An}}}}{AGh{{n{CdAn}}}}{{AGbj}{{h{{n{CdAn}}}}}}{{}{{n{Cdl}}}}{AGj{{n{CdAn}}}}{{}{{n{ABbl}}}}21{j{{n{Cdl}}}}{{AGjj}{{n{CdAn}}}}{{AGjjAGl}{{n{CdAn}}}}{{AGjjj}{{n{AjAn}}}}{Dd{{n{Cdl}}}}{{AGjDd}{{n{CdAn}}}}{AFnCd}98{ABb{{If{Al}}}}0{ce{}{}}00000000000000000000000000000000000`{{AGjj}Aj}{AnAn}{AGnAGn}{AH`AH`}{AHbAHb}{AHdAHd}{AHfAHf}{AHhAHh}{AHjAHj}{AHlAHl}{AGlAGl}{AHnAHn}{ABbABb}{{ce}Aj{}{}}00000000000``{{AGjjj}{{n{jAn}}}}{{AGbAlAGd}Aj}{{AGfAG`}Aj}{{AGhCd}Aj}{{AGbCdj}{{h{Aj}}}}{{AFnCd}Aj}{AH`AHb}{AH`AHd}{AH`AHf}{AH`AHh}{AH`AHj}{AH`AHl}{AH`j}0{AH`Cl}0{{}AHn}{{}AGj}{{}AG`}{{}AFn}{{}AGh}{{}AGb}{AG`Aj}{ABbAj}{AHbAH`}{AHdAH`}{AHfAH`}{AHhAH`}{AHjAH`}{AHlAH`}{{AH`j}AH`}0{{AH`Cl}AH`}0{AGjCd}{{AnAn}Cj}{{AnBd}Bf}{{AGnBd}Bf}{{AH`Bd}Bf}{{AHbBd}Bf}{{AHdBd}Bf}{{AHfBd}Bf}{{AHhBd}Bf}{{AHjBd}Bf}{{AHlBd}Bf}{{AGlBd}Bf}{{AHnBd}Bf}{{AGjBd}Bf}{{ABbBd}Bf}{{AG`Bd}Bf}{{AFnBd}Bf}{{AGfBd}Bf}{{AGhBd}Bf}{{AGbBd}Bf}{{AG`Cd}{{n{AjAn}}}}``{AFnAG`}{CdAj}{{AGjCd}Aj}{{AGjjj}Aj}0```{cc{}}00000000000000000{AH`AGl}`{AG`Dd}{Cd{{n{Ajl}}}}{{AGjCd}{{n{AjAn}}}}2{{AGjj}{{n{jAn}}}}{AG`Cd}{jj}{{AGjCd}{{n{jAn}}}}{{AGjCd}{{h{j}}}}{AGf{{n{AjAn}}}}{AGh{{n{AjAn}}}}{AG`{{n{AjAn}}}}{AFn{{n{AjAn}}}}32{{AGjjjj}Aj}{AGjAj}{ce{}{}}00000000000000000`{Al{{h{AGd}}}}{jAGd}{{AGjjj}Aj}{{}AHn}{AGjAHn}{{AGjjjj}{{n{jAn}}}}{AGnAH`}{ClAHl}{{}AGj}{{CdCb}ABb}{{}AG`}{{}AFn}{{}AGf}{{}AGh}{{}AGb}{{AGjjj}j}`````````{{AGjj}AH`}0{AH`{{n{AGnAn}}}}`{ABbCb}`{{AGjCb}{{h{Cd}}}}{AHnAj}{Cd{{n{Ajl}}}}{{AGjCd}{{n{AjAn}}}}{{AGjj}AGl}`{{AGjj}{{n{AjAn}}}}{{CbCdj}Aj}{{AG`Cd}Aj}{AGfAj}{AGhAj}```````{{AGjjj}{{n{AjAn}}}}``{AGlAH`}{ce{}{}}00000000000`{ABb{{n{ABbl}}}}{c{{n{e}}}{}{}}0{Cl{{n{AGnc}}}{}}1111111111111111111111111111111111{{AGjjj}{{n{jAn}}}}{cC`{}}00000000000000000``{ABbCd}`{{AGjCd}{{h{Cb}}}}{{AGjjAGl}Aj}`88{{{AI`{c}}}{{AI`{e}}}AIbAIb}{{}{{n{Ajl}}}}{{{AI`{c}}Bd}Bf{AFfAIb}}{cc{}}{{}{{AI`{c}}}AIb}={Cd{{AI`{c}}}AIb}{{{AI`{c}}AId}{{AI`{c}}}AIb}`{{{AI`{c}}}{{n{cl}}}AIb}{Cd{{n{Ddl}}}}{Cd{{n{Fhl}}}}{Cd{{n{Cll}}}}{Cd{{n{All}}}}{c{{n{e}}}{}{}}0{cC`{}}{{{AI`{c}}c}{{n{Ajl}}}AIb}0{{CdAl}{{n{Ajl}}}}`{ce{}{}}0{{jAIf}{{n{{Kl{Kj}}l}}}}{{AAfjjAIf}{{n{{Kl{Kj}}l}}}}{AIhCd}{AIhAj}{{AIhBd}Bf}{cc{}}6{{Cd{h{AAf}}jjAIf}{{n{Cdl}}}}0{Cd{{n{Ajl}}}}0{{AIjCd}AIh}`==<````{{DbADb}{{n{Ajl}}}}{CbCj}033```````````````````````````{AIlCb}{AInCb}{AJ`{{h{Cb}}}}{{}AJb}{{}{{n{Kdl}}}}{AJ`Aj}{{AJdCd}AJf}{{AInCd}AJf}10{{AIlCdAJh}AJf}00{{}{{n{AJjl}}}}{{AJbAJb}AJb}{{AJbAJb}Aj}10{AJbCl}021{ce{}{}}000000000000000{{AJdCd}{{h{Cb}}}}{AIlAj}{AJbAJb}{AIlAIl}{{ce}Aj{}{}}0{AJd{{n{Kdl}}}}3{{AJbAJb}Cj}{{AJdAJdj}Aj}{AJdCb}{{}AJb}00{{}AIl}{{}AJj}{{}AJd}{{}AIn}{Kdc{}}0{{AJbAJb}AJb}{AIl{{n{Ajl}}}}{KdAj}{AInAj}9`{AIl{{h{AJj}}}}0:{{AJbc}Aj{{En{}{{El{AJb}}}}}}{AIlAJb}{{AJbBd}Bf}0000{{AIlBd}Bf}{{AJjBd}Bf}{{AJfBd}Bf}{{AJdBd}Bf}{{KdBd}Bf}{{AInBd}Bf}{{AJ`Bd}Bf};{AJjAj}0{cc{}}0000000{Cl{{h{AJb}}}}{ClAJb}00{cAJb{{En{}{{El{AJb}}}}}}{d{{h{AJb}}}}{AJ`{{h{AIn}}}}{{}{{Kf{Kd}}}}1{AJ`AIn}`{{AJjj}AIl}{Cdj}{AJ`j}2{{Ldj}{{Ed{Aj}}}}{{AJbAJb}Aj}{{AJbAJb}AJb}{{AJbAJb}Cj}{ce{}{}}0000000{AJbc{}}{AJbCj}{AIlCj}1{KdCj}{AJb{{F`{AJb}}}}{AJb{{Fb{AJb}}}}{AJdAj}{CbCb}{AIlAj}01{{AJdCdCbAJb}{{n{Ajl}}}}{{AInCdCbAJbCj}{{n{Ajl}}}}{{AJ`CdCbAJbCj}{{n{Ajl}}}}210{{AJd{D`{Cd}}CbAJb}{{n{Ajl}}}}00{{}Cb}{CdAJ`}{AJbAJb}``{{LdCl}{{Ed{Aj}}}}0{{AJdCd}{{n{Cbl}}}}{{AJdAJ`}Aj}{AIlCj}{{}j}`{AIlCl}`{{AJbAJb}Aj}`{{AJbAJbCj}Aj}{{AIlCbAJb}Aj}{{AJdCd}{{n{Ajl}}}}{KdAj}1{AJdKd}7{AJf{{n{Ajl}}}}{CbCb}{{AJbAJb}AJb}8?0{{}AJb}00{ce{}{}}0:{c{{n{e}}}{}{}}000000000000000{cC`{}}00000004{{AJdCd}Aj}{{AInCd}{{h{AIl}}}}{{AJ`Cd}{{h{AIl}}}}210{{AJd{D`{Cd}}}Aj}00{{}Kd}{{AJdCd}AJf}{{AInCd}AJf}{{AJjCd}AJf}000`::{{CbCbj}{{n{AJll}}}}{Cb{{n{AJll}}}}{AJlAj}{{AJlBd}Bf}{cc{}}`?`>>={AJlCd}````{AJn{{n{Cdl}}}}`{{}{{n{Cdl}}}}{{CdKd}{{n{Ajl}}}}{ce{}{}}0{{AJnCd}Aj}{{AJnBd}Bf}{CdAj}83{{CdCd}AJn}`{CdCd}{c{{n{e}}}{}{}}0{cC`{}}``{AK`j}`{AK`Cb}{{{D`{Cb}}}j}2::{{AK`Cb}Cj}{AK`Aj}{{AK`Cb}Aj}0{{AK`CbCb}Aj}{{AK`Bd}Bf}{cc{}}{{AK`Cb}{{Gb{jj}}}}{{{D`{Cb}}}{{n{Ajl}}}}{{{D`{Cb}}Cl}Aj}{AK`Cj}{ce{}{}}:{{AK`Cl}Aj}{{}{{n{Ajl}}}}{{AK`jClCl}Aj}{{}AK`}`{{AK`CbCl}Aj}4{{AK`CbCbCj}Aj}{{AK`{D`{Cb}}}Aj}??>{c{{n{e}}}{}{}}0{cC`{}}{{}Cb}{CbAj}0{{CbCb}Aj}110{CbCj}0````{{AKbjj}{{n{Cdl}}}}`>>{{}AKb}{{AKbBd}Bf}{{AKbCdj}Aj}{cc{}}{{AKbCdjj}Aj}{ce{}{}}5```<<;{AKbj}{{jj}{{n{{D`{Cd}}l}}}}0{{{D`{Cd}}}Aj}0{{}Aj}````````````````````````{{AKdj}{{h{Cb}}}}```{AKdj}````{{AKdj}AJb}````````````````````````````````````77777777{AKfAKf}{AKhAKh}{{ce}Aj{}{}}0{{}AKh}`{{AKfBd}Bf}{{KjBd}Bf}{{AKjBd}Bf}{cc{}}000{Kj{{Gh{{ADn{AKd}}}}}}{{AKhAKj}c{}}{AKh}{AKj{{Gh{{ADn{AKd}}}}}}{AKj{{Kl{Kj}}}}{AKj{{Gj{{ADn{AKd}}}}}}{Kj{{Gj{{ADn{AKd}}}}}}4{{AKdAIjjCj}{{n{AKfl}}}}0{AKdCj}0{ce{}{}}000`{AKhc{}}`0{{AKdj}{{h{Cb}}}}``{AKdj}{cKjAKd}{{j{Kl{Kj}}}AKj}{{}AKh}`{AKdAJh}06`{{AKdj}AJb}{AKj{{Gb{CdCd}}}}`{AKj{{Gb{jj}}}};;::{c{{n{e}}}{}{}}0000000{cC`{}}000{{AKdj}Aj}0```````{{}AIf}{{AIfAIf}AIf}{{AIfAIf}Aj}10{AIfFh}021{ce{}{}}000{AIfAIf}{{ce}Aj{}{}}1{{AIfAIf}Cj}670{{AIfc}Aj{{En{}{{El{AIf}}}}}}`{{AIfBd}Bf}0000{{AKlBd}Bf}{cc{}}0{Fh{{h{AIf}}}}{FhAIf}00{cAIf{{En{}{{El{AIf}}}}}}{d{{h{AIf}}}}{{AKlAIjjCj}{{n{AKfl}}}}>?9<<{AIfc{}}{AIfCj}0{AIf{{F`{AIf}}}}{AIf{{Fb{AIf}}}}{{AKlj}{{h{Cb}}}}{AKlj}{{AAfjjAIf}{{n{AKll}}}}{AIfAIf}`{{AKlj}AJb}{{AIfAIf}Aj}{{AIfAIfCj}Aj}`{{AIfAIf}AIf}20{ce{}{}}3{c{{n{e}}}{}{}}000{cC`{}}03``{AKn{{n{Ajl}}}}33{{AKnCd}{{D`{Cd}}}}{{}AKn}{{AKnBd}Bf}{cc{}}`7{{AKnj}{{h{Cb}}}}{AKnj}{{}{{n{AKnl}}}}{{}{{n{Kjl}}}}{j{{n{AKnl}}}}{{AKnj}AJb}{{AKnCd}Cd}==<{{AKnj}Aj}``??{AL`AL`}{{ce}Aj{}{}}{{}AL`}{{AL`Bd}Bf}<{ce{}{}}{{AL`j}{{h{Cb}}}}{AL`j}{{CbjCj}AL`}{{CbjCj}Kj}{{AL`j}AJb}`5{c{{n{e}}}{}{}}0{cC`{}}``{{ALbj}{{n{Ajl}}}}{ALb{{n{Ajl}}}}99`{{}ALb}{{ALbBd}Bf}{cc{}}<{{ALbj}{{h{Cb}}}}{ALbj}{jALb}`{{ALbj}Cj}::9{{ALbj}Aj}`{ce{}{}}0{ALdALd}{{ce}Aj{}{}}{{}ALd}{{ALdBd}Bf}:{ALdCj}5{{ALdj}{{h{Cb}}}}{ALdj}{jALd}{jKj}{{ALdj}AJb}`:{c{{n{e}}}{}{}}0{cC`{}}``{ALf{{n{Ajl}}}}=={{}ALf}`{{ALfBd}Bf}{cc{}}{ce{}{}}{{ALfj}{{h{Cb}}}}{ALfj}{{jAIf}{{n{ALfl}}}}{{jAIf}{{n{Kjl}}}}{{ALfj}AJb};;:{{ALfj}Aj}```{{AIjCj}{{n{Ajl}}}}7777{{AIj{Kl{Kj}}j{ALh{AKh}}}{{n{Ajl}}}}{KnAj}{AIjAj}`{{AIjBd}Bf}{{KnBd}Bf}=={{AIjCdCj}{{n{Ajl}}}}{AIj{{n{Ajl}}}}70{{AIj{Kl{Kj}}}{{n{Cdl}}}}{{AIjCd{Kl{Kj}}j}{{n{Cdl}}}}{{AIjCd{Kl{Kj}}}{{n{Cdl}}}}0{ce{}{}}0{{AIjAKj}{{n{Ajl}}}}{{CdCdAJb}AIj}{{AIj{Kl{Kj}}}{{n{Knl}}}}`{{AIjKd}Aj}{{AIjKdCd}Aj}`{{AIjCd}{{n{{ADn{AKj}}l}}}}``{c{{n{e}}}{}{}}000{cC`{}}0{{AIjAKj}Aj}`{KnCd}{AIj{{Gb{CdCd}}}}`````````````{ALjLd}0<<<<<<{ALlALl}{ALnALn}{ALjALj}{{ce}Aj{}{}}00{LdAj}00{{ALlBd}Bf}{{ALnBd}Bf}{{ALjBd}Bf}{cc{}}00{LdACd}{{Ldj}ALl}{ce{}{}}00{{Ld{D`{Cd}}}{{n{Ajl}}}}`{AM`ALj}{{Ld{D`{Cb}}AJhALn}{{n{Ajl}}}}``{{LdIlCj}Aj}{{LdIl}{{n{Ajl}}}}0``555{c{{n{e}}}{}{}}00000{cC`{}}006``77{AMbAMb}{{ce}Aj{}{}}{{}AMb}{AMbAj}00{{AMbBd}Bf}?{AMbACd}{{AMbj}ALl}>{{AMb{D`{Cd}}}{{n{Ajl}}}}5{{AMb{D`{Cb}}AJhALn}{{n{Ajl}}}}{{AMbIlCj}Aj}{{AMbIl}{{n{Ajl}}}}0{ce{}{}}==<4``00{AMdAMd};{{}AMd}{AMdAj}00{{AMdBd}Bf}{cc{}}{AMdACd}{{AMdj}ALl}7{{AMd{D`{Cd}}}{{n{Ajl}}}}6{{AMd{D`{Cb}}AJhALn}{{n{Ajl}}}}{{AMdIlCj}Aj}{{AMdIl}{{n{Ajl}}}}0;{c{{n{e}}}{}{}}0{cC`{}}5```=={AMfAMf}{{ce}Aj{}{}}`{{}AMf}`{{AMfBd}Bf}<{DhAMf}`{ce{}{}}````0776`{{AMfDh}Aj}`````````````11{{DhClCl}Cj}{AMhAMh}7{AMf{{n{AjMf}}}}0{{{h{Cb}}{h{Cd}}}Aj}11{{FhAMf}{{n{AjMf}}}}2{{ClCj}{{n{AjMf}}}}333`{cc{}}8`{{FhFhFh}Cl}`9{c{{n{e}}}{}{}}0{cC`{}}``````````````;;;;{{}Mf}{AMjAMj}{MfMf}{{ce}Aj{}{}}0{{AMjBd}Bf}{{MfBd}Bf}99{lMf}`6{ce{}{}}07777{ClMf}11::::9988````````111111{AMlAMl}{AMnAMn}{AN`AN`}888`{{AMlAMl}Cj}{{AMlBd}Bf}{{AMnBd}Bf}{{AN`Bd}Bf}{cc{}}00``999{AMlCj}```{AMn{{n{{Bl{Al}}Mf}}}}{{AN`{An{Al}}}{{n{AjMf}}}}<<<{{{An{Al}}}{{n{FhMf}}}}{Fh{{n{AMlc}}}{}}{c{{n{e}}}{}{}}00{{{An{Al}}}{{n{AN`Mf}}}}{{{An{Al}}}{{n{AMnMf}}}}222{cC`{}}00{AMf{{n{AjMf}}}}{{}Cl}{{FhAMf}{{n{AjMf}}}}2```{ce{}{}}000`{{}{{n{CjMf}}}}{ANbANb}{{ce}Aj{}{}}{{ANbBd}Bf}{cc{}}055````{{}Aj}{{AMfFhFh}{{n{CjMf}}}}157>>>>;;{{}{{n{Ajl}}}}{{}ANb}```````````````````99{ANdANd}7`{{ANdBd}Bf}6{EbAl}{ANdAl}{{ANdDd}Al}{ANdAj}?{{ACdDd}ANd}{{ANdDdAl}Aj}`{{EbAl}Aj}{{ANdAl}Aj}{ce{}{}}{c{{n{e}}}{}{}}0{cC`{}}```````````````````````````````````````````````````{{H`CbClClCl}{{n{Ajl}}}}3333333333`{H`Aj}{ANfANf}{AAbAAb}{MbMb}{{ce}Aj{}{}}00``{{}ANf}``{{ANfBd}Bf}{{H`Bd}Bf}{{AAbBd}Bf}{{MbBd}Bf}{cc{}}0000{H`{{n{AlAAb}}}}{H`{{n{ClAAb}}}}0000000000{H`{{n{FhAAb}}}}{H`{{n{DdAAb}}}}2``{{H`CdCdCdCl}{{n{Ajl}}}}{{H`CdCd}{{n{Ajl}}}}{Cd{{n{Ajl}}}}{ce{}{}}0000{{H`DdMb}{{n{Cll}}}}{{H`DdMbCl}{{n{Ajl}}}}{{H`j}Cj}{{H`{D`{Cb}}AJhALn}{{n{Ajl}}}}{{H`CbClClAJh}Cl}```{{H`Lh}{{n{Ajl}}}}00`{H`{{n{Ajl}}}}{{H`CbClClCl}{{n{Ajl}}}}{{H`Cb}{{n{Ajl}}}}```````````{{H`Al}Aj}{{H`Cl}Aj}0000000000{{H`Fh}Aj}{{H`j}Aj}{{H`Dd}Aj}37````{FhAj}`???{c{{n{e}}}{}{}}000000000{cC`{}}0000```{{H`ClClCl}{{n{AjAAb}}}}{{H`cAId}{{n{AjAAb}}}ANh}{{H`FhCl}{{n{Ajl}}}}{{H`ClClCl}{{n{Ajl}}}}?`````````````{ce{}{}}000{ANjANj}{{ce}Aj{}{}}{{}Kh}{{}ANj}`{{ANjBd}Bf}{{KhBd}Bf}{AlANj}{cc{}}0{{CdH`}{{n{Ajl}}}}99{ANjCj}60{KhCj}`1{KhAj}0`{ANjAl}{{ANjCj}Aj}00{{ANjAl}Aj}?{c{{n{e}}}{}{}}000{cC`{}}0`{{ANjCj}ANj}00{{ANjAl}ANj}``````````````````````{{}ANl}{{ANlANl}ANl}{{ANlANl}Aj}10{ANlCl}021{ce{}{}}00000{AlAl}{ANnANn}{ANlANl}{{ce}Aj{}{}}001{{ANlANl}Cj}89{{ANlc}Aj{{En{}{{El{ANl}}}}}}{{AlBd}Bf}{{ANnBd}Bf}{{ANlBd}Bf}00000{cc{}}00{Cl{{h{ANl}}}}{ClANl}00{cANl{{En{}{{El{ANl}}}}}}{d{{h{ANl}}}}{{}ANl}{{}{{n{AjAl}}}}{{ANlANl}Aj}{{ANlANl}ANl}={ce{}{}}00{ANlc{}}{Cb{{n{AjAl}}}}{ANlCj}0{ANl{{F`{ANl}}}}{ANl{{Fb{ANl}}}}{ANlANl}48{{}AO`}{{ANlANlCj}Aj}{{CbCj}{{n{AjAl}}}}:;:999{cCn{}}<{c{{n{e}}}{}{}}00000{cC`{}}00=:{{}Aj}```=={{AObj}Aj}{AObAOb}{{ce}Aj{}{}}{{AObj}{{ADn{AOb}}}}{{AObCd}Aj}0{{}AOb}`{{AObBd}Bf}{cc{}}`{{AObj}{{If{Al}}}}`{ce{}{}}{{AObj}Cj}5````{{}{{Gh{AOb}}}}{{}{{Gj{AOb}}}}{{AObClClCl}Aj}`````4{c{{n{e}}}{}{}}0`{cC`{}}`````````````````{{}AOd}{AOdCl}{{AOdAOd}AOd}{{AOdAOd}Aj}102210::{AOdAOd}{{ce}Aj{}{}}1{{AOdAOd}Cj}460{{AOdc}Aj{{En{}{{El{AOd}}}}}}{{AOdBd}Bf}0000{cc{}}{Cl{{h{AOd}}}}{ClAOd}00{cAOd{{En{}{{El{AOd}}}}}}{d{{h{AOd}}}}:;7{ce{}{}}{AOdc{}}{AOdCj}0{AOd{{F`{AOd}}}}{AOd{{Fb{AOd}}}}>{{}AOd}{{AOdAOd}Aj}{{AOdAOdCj}Aj}{{}Cj}30{{}Aj}0{{AOdAOd}AOd}40:{cCn{}}5{c{{n{e}}}{}{}}0{cC`{}}35``````````````````````{{}AOf}{{AOfAOf}AOf}{{AOfAOf}Aj}10{AOfCl}021{ce{}{}}00000{AA`AA`}{AOhAOh}{{ce}Aj{}{}}0{AOfAOf}{{AOfAOf}Cj}89{{AA`AA`}Cj}{{AOhAOh}Cj}{{AOfc}Aj{{En{}{{El{AOf}}}}}}{{AA`Bd}Bf}0{{AOhBd}Bf}{{AOfBd}Bf}000{cc{}}00{Cl{{h{AOf}}}}{ClAOf}00{cAOf{{En{}{{El{AOf}}}}}}{d{{h{AOf}}}}{{}Cl}{{AOfAOf}Aj}{{AOfAOf}AOf}>{ce{}{}}00{AOfc{}}{AOfCj}0{AOf{{F`{AOf}}}}{AOf{{Fb{AOf}}}}{AOfAOf}{{CdAJhAOh}{{n{Ajl}}}}{{{D`{Cd}}AOh}{{n{Ajl}}}}0{{}Aj}{{FhFhFhFh}AOj};{AA`Cl}{{CdAOfAJh}{{n{Ajl}}}}{Cd{{n{Ajl}}}}{{CdAJh}{{n{Ajl}}}}01{{AOfAOfCj}Aj}{ClAj}{{AOfAOf}AOf}{{AOfAOf}Aj}1{ce{}{}}0{cCn{}}2{c{{n{e}}}{}{}}00000{cC`{}}005`{AOf{{n{Cdl}}}}{CdAj}`55{BnBn}{{ce}Aj{}{}}`{{}Bn}{{Bnd}Cj}{{BnBn}Cj}{{BnBd}Bf}0{dBn}{cc{}}{{{If{Al}}}Bn}>`{Bnj}7{{BnACf}Aj}{ce{}{}}{cCn{}}{c{{n{e}}}{}{}}0{cC`{}}``3333{AOlAOl}{AOnAOn}??{{}AOl}{{}AOn}{{AOlBd}Bf}{{AOnBd}Bf}=={{AOlDd}Al}{{AOnDd}Al};;{{AOlDd}Dd}{{AOnDd}Dd}76{{AOlDdAl}Aj}{{AOnDdAl}Aj}{{AOlDdDd}Aj}{{AOnDdDd}Aj}{ce{}{}}0{c{{n{e}}}{}{}}000{cC`{}}0`22{cc{}}`{{ADbB`}{{n{Ajl}}}}4{{LdDb{D`{Cb}}}{{n{Ajl}}}}{{LdDbADb}{{n{Ajl}}}}554``{{}AO`}{{}j}10``````````````````{{{Hf{}{{Hd{Aj}}}}}{{n{Jjl}}}}{j{{n{Jjl}}}}{{}Jj}`{{}Aj}`{d{{n{Ajl}}}}```{FhCj}{CdCj}````````````````33{JjAj}``4`````{BbAIf}4```{ce{}{}}000987{L`Jj}`{L`Fh}8{{}L`}{{}Bd}{{L`Bd}Bf}{{BdBd}Bf}{cc{}}06{{BdFh}{{h{Jj}}}}{{L`Jj}Aj}`99={Bd{{Bh{Bf}}}}`76`{{}Aj}0:{L`{{h{{Gb{JjJj}}}}}}>3{{BjBj}Aj}{JjBj}3{{BdJj}Aj}`{c{{n{e}}}{}{}}000{cC`{}}0````````````````````{{Il{Hf{}{{Hd{Aj}}}}}{{n{{Gb{{Kl{Kj}}{D`{Cd}}j}}l}}}}{{}{{n{{Gb{{Kl{Kj}}{D`{Cd}}}}l}}}}{{Ilj}{{n{{Gb{{Kl{Kj}}{D`{Cd}}j}}l}}}}{ce{}{}}000000000000000{BlBl}{AfAf}{NbNb}{BnBn}{BfBf}{{ce}Aj{}{}}0000`{{Il{Hf{}{{Hd{Aj}}}}}{{n{Jjl}}}}{{Ilj}{{n{Jjl}}}}{{}Bl}{{}BA`}{{}Nb}{{}Bn}{{}Bf}{{BjBj}Cj}{{BlBl}Cj}{{BjCdCj}{{n{Ajl}}}}`{{BjBd}Bf}{{BlBd}Bf}{{AfBd}Bf}{{BA`Bd}Bf}{{NbBd}Bf}{cc{}}0000000{Bn}{Bf}{BjFh}219``{ce{}{}}0000000{BjCj}0{CdCj}1{Bnc{}}{Bfc{}}``10`{{AIjCd{h{AAf}}jjAIf}{{n{Cdl}}}}{{BjCd{h{AAf}}jjAIf}{{n{Cdl}}}}{{BjCd{h{AAf}}jjAIf}{{n{AIhl}}}}1{{BjCd}{{n{Ajl}}}}0{{}BA`}{{}Bn}{{}Bf}{BA`Fh}``{{BAbd}BAb}`:9`````````{BjAj}000{Bj{{D`{Cd}}}}``{{}Aj}{ce{}{}}0000{c{{n{e}}}{}{}}000000000000000{cC`{}}0000000{{BjFh}Fh}```33{{}BAd}{{BAdBd}Bf}{cc{}}62554{{BAdJj}Aj}`{BAd{{h{Jj}}}}`````````````````88{AJhAJh}{{ce}Aj{}{}}{{AJhAJh}Cj}{{AJhBd}Bf}6<<;;:``````````````````{{BAfjj}{{h{j}}}}{{BAhjj}{{h{j}}}}{{{BAj{c}}jj}{{h{j}}}{BAfAFf}}{{cjj}{{h{j}}}BAf}```{ce{}{}}000{BAfj}{BAhj}{{{BAj{c}}}j{BAfAFf}}``{BAhBAh}{{{BAj{c}}}{{BAj{c}}}{BAlBAfAFf}}<<{{}BAh}{{}{{BAj{c}}}{AFjBAfAFf}}{BAfCj}{BAhCj}{{{BAj{c}}}Cj{BAfAFf}}{{BAhBd}Bf}{{{BAj{c}}Bd}Bf{AFfBAfAFf}}{{BAfjj}Aj}{{BAhjj}Aj}{{{BAj{c}}jj}Aj{BAfAFf}}{cc{}}0{{BAfj}Cj}{{BAhj}Cj}{{{BAj{c}}j}Cj{BAfAFf}}{ce{}{}}0>{{}{{BAj{BAh}}}}{{BAfj}{{h{j}}}}{{BAhj}{{h{j}}}}{{{BAj{c}}j}{{h{j}}}{BAfAFf}}{{BAfjjCj}Aj}{{BAhjjCj}Aj}{{{BAj{c}}jjCj}Aj{BAfAFf}}77{c{{n{e}}}{}{}}000{cC`{}}0{BAfj}{BAhj}{{{BAj{c}}}j{BAfAFf}}``````````<<<<<<{{{BAn{c}}}{{Ed{Aj}}}AIb}00{BB`BB`}{{ce}Aj{}{}}{{{BAn{c}}}cAIb}{{{BBb{c}}}cAIb}{{BB`Bd}Bf}{{{BAn{c}}Bd}Bf{AFfAIb}}{{{BBb{c}}Bd}Bf{AFfAIb}}{cc{}}0045{{}Aj}{{{BAn{c}}c}{{Ed{Aj}}}AIb}`{{{BBb{c}}{BAn{c}}}{{Ed{Aj}}}AIb}{{{BBb{c}}c}{{Ed{Aj}}}AIb}{ce{}{}}00{c{{BAn{c}}}AIb}{c{{BBb{c}}}AIb}5{{{BAn{c}}}AjAIb}{{{BAn{c}}c}AjAIb}4{c{{n{e}}}{}{}}00{{{BAn{c}}}{{Ed{c}}}AIb}111{cC`{}}00{{}{{BAn{c}}}AIb}{{}{{BBb{c}}}AIb}`99{{cj}{{h{{D`{c}}}}}Cf}{{{D`{c}}}{{D`{c}}}BAl}{{ce}Aj{}{}}{{{D`{c}}c}CjCf}{{{D`{c}}{D`{c}}}CjCf}0{{{D`{c}}}cCf}`{{{D`{c}}Bd}BfAFf}{cc{}}{{cc}{{D`{c}}}Cf}{ce{}{}}{{{D`{c}}}CjCf}{{{D`{c}}AJh}{{`{{ABl{}{{El{c}}}}}}}Cf}{{{D`{c}}}jCf}{{{D`{c}}{D`{c}}}{{D`{c}}}Cf}{{cj}{{D`{c}}}Cf}:9`5{c{{n{e}}}{}{}}0{cC`{}}{{cc}c{}}0{{}Aj}{{cc}Cj{}}{{cccc}CjBBd}{jj}0{{CdCd}Aj}````{BBf{{An{AMl}}}}{BBh{{n{AjMf}}}}{BBhCj}`{{BBj{An{Al}}jAl}{{n{AjMf}}}}{BBj{{n{AjMf}}}}{{BBjCj}{{n{AjMf}}}}{{}{{Kf{BBl}}}}{{}{{n{AjMf}}}}```{ce{}{}}0{BBlBBl}{{ce}Aj{}{}}{{}BBl}{{BBlBd}Bf}{cc{}}{BBl{{An{AMl}}}}{BBl{{n{AjMf}}}}7{BBlCj}`{{BBlAOj}{{n{AOjMf}}}}6{{BBl{An{Al}}jAl}{{n{AjMf}}}}3{{BBlCj}{{n{AjMf}}}}4;{c{{n{e}}}{}{}}0{cC`{}}`{{}AO`}{{BBnBBn}BC`}{BC`Aj}{BBnBC`}{{BC`BBn}BC`}{{BCbBCd}Aj}","c":[],"p":[[5,"ACPITableBuffer",33],[1,"str"],[5,"ACPITable",33],[6,"Option",5265],[1,"usize"],[6,"SvsmError",1619],[6,"Result",5266],[5,"RawACPITableHeader",33],[5,"RawMADTEntryHeader",33],[5,"RawMADTEntryLocalApic",33],[5,"RawMADTEntryLocalX2Apic",33],[5,"ACPICPUInfo",33],[1,"unit"],[1,"u8"],[1,"slice"],[5,"RSDPDesc",33],[5,"ACPITableHeader",33],[5,"Formatter",5267],[8,"Result",5267],[5,"ACPITableMeta",33],[5,"FwCfg",1886],[5,"Vec",5268],[5,"FixedString",4659],[5,"TypeId",5269],[5,"PhysAddr",198],[5,"VirtAddr",198],[10,"Address",198],[6,"Ordering",5270],[1,"bool"],[1,"u64"],[5,"String",5271],[5,"MemoryRegion",5185],[6,"SvsmConfig",279],[1,"u16"],[5,"SevFWMetaData",1947],[5,"VMSA",5272],[5,"Console",305],[5,"ConsoleLoggerComponent",305],[5,"ConsoleLogger",305],[5,"Metadata",5273],[10,"Terminal",4047],[8,"ImmutAfterInitResult",5128],[5,"Record",5273],[5,"CR0Flags",377],[5,"CR4Flags",377],[17,"Item"],[10,"IntoIterator",5274],[5,"Iter",5275],[5,"IterNames",5275],[5,"CpuidLeaf",513],[5,"CpuidResult",513],[1,"u32"],[5,"SnpCpuidTable",5276],[5,"EFERFlags",554],[5,"X86ExceptionContext",713],[5,"GDT",635],[1,"tuple"],[5,"GDTDesc",635],[5,"GDTEntry",635],[5,"ReadLockGuard",2415],[5,"WriteLockGuard",2415],[5,"X86Tss",1321],[5,"GHCBRef",695],[5,"GHCB",4109],[5,"IDT",713],[17,"Output"],[1,"fn"],[5,"IdtEntry",713],[5,"IdtDesc",713],[6,"Immediate",880],[6,"Register",880],[6,"Operand",880],[6,"DecodedInsn",880],[5,"Instruction",880],[1,"array"],[5,"RdtscpOut",982],[5,"PerCpuUnsafe",1005],[5,"PerCpu",1005],[5,"RefMut",5277],[5,"GuestVmsaRef",1005],[5,"PerCpuShared",1005],[5,"VmsaRef",1005],[5,"VmsaRegistryEntry",1005],[5,"Ref",5277],[8,"TaskPointer",4845],[5,"PerCpuVmsas",1005],[5,"PerCpuInfo",1005],[5,"PerCpuAreas",1005],[5,"IstStacks",1005],[5,"PageTableRef",3008],[5,"LockGuard",2463],[5,"HVDoorbell",4274],[5,"Mapping",3424],[5,"Arc",5278],[5,"VMRMapping",3681],[5,"RunQueue",4796],[5,"RWLock",2415],[10,"SvsmPlatform",3728],[5,"VMSASegment",5272],[5,"X86GeneralRegs",1241],[5,"X86SegmentRegs",1241],[5,"X86InterruptFrame",1241],[5,"VcError",1345],[6,"VcErrorType",1345],[6,"GHCBIOSize",4109],[5,"Aes256Gcm",1415],[6,"SvsmReqError",3908],[6,"AesGcmOperation",1435],[5,"GdbStubTarget",1454],[8,"TargetResult",5279],[6,"BaseOps",5280],[5,"GdbStubBreakpoint",1454],[5,"TaskContext",4845],[5,"GdbTaskContext",1454],[6,"ExceptionType",1454],[5,"GdbStubConnection",1454],[5,"SvsmGdbStub",1454],[10,"FnMut",5281],[8,"Tid",5282],[6,"Signal",5283],[8,"BreakpointsOps",5284],[8,"HwBreakpointOps",5284],[8,"HwWatchpointOps",5284],[8,"MultiThreadResumeOps",5285],[8,"MultiThreadSingleStepOps",5285],[8,"SwBreakpointOps",5284],[8,"ThreadExtraInfoOps",5286],[6,"UnwoundStackFrame",1565],[5,"StackFrame",1565],[5,"StackUnwinder",1565],[6,"TaskError",4845],[6,"FwCfgError",1886],[6,"PackItError",5287],[6,"GhcbMsrError",4327],[6,"AllocError",2573],[6,"SevSnpError",4548],[6,"GhcbError",4109],[6,"FsError",1697],[5,"FileHandle",1764],[10,"Directory",1697],[8,"FileName",1697],[10,"File",1697],[6,"DirEntry",1697],[5,"DirectoryEntry",1697],[5,"PageRef",2573],[5,"RawFileHandle",1764],[5,"SvsmFs",1764],[5,"RamDirectory",1830],[10,"DoubleEndedIterator",5288],[10,"Iterator",5289],[5,"RawRamFile",1830],[5,"RamFile",1830],[5,"FwCfgFile",1886],[10,"IOPort",2388],[1,"char"],[5,"Uuid",1947],[5,"SevMetaDataHeader",1947],[5,"SevMetaDataDesc",1947],[5,"RawMetaHeader",1947],[5,"RawMetaBuffer",1947],[5,"KernelLaunchInfo",5290],[6,"SnpGuestRequestClass",2066],[5,"SnpGuestRequestDriver",2066],[6,"SnpGuestRequestMsgType",2113],[5,"SnpGuestRequestMsgHdr",2113],[5,"SnpGuestRequestMsg",2113],[5,"Box",5291],[5,"SnpGuestRequestExtData",2113],[6,"SnpGuestRequestAead",2113],[5,"SnpReportRequest",2219],[5,"SnpReportResponse",2219],[6,"SnpReportResponseStatus",2219],[5,"TcbVersion",2219],[5,"Signature",2219],[5,"AttestationReport",2219],[5,"IgvmMemoryMap",2340],[5,"IgvmParams",2340],[5,"DefaultIOPort",2388],[10,"Debug",5267],[5,"SpinLock",2463],[10,"Default",5292],[5,"KernelMapping",2517],[5,"SlabCommon",2573],[5,"SlabPage",2573],[5,"SvsmAllocator",2573],[5,"Layout",5293],[5,"SlabPageSlab",2573],[5,"Slab",2573],[5,"MemoryRegion",2573],[6,"PageInfo",2573],[6,"PageType",2573],[5,"PageStorageType",2573],[5,"FreeInfo",2573],[5,"AllocatedInfo",2573],[5,"SlabPageInfo",2573],[5,"CompoundInfo",2573],[5,"ReservedInfo",2573],[5,"FileInfo",2573],[5,"MemInfo",2573],[5,"GuestPtr",2957],[10,"Copy",5294],[1,"isize"],[5,"VMFileMappingFlags",3505],[5,"VMMappingGuard",2980],[5,"VMR",3681],[5,"PTEntry",3008],[5,"RawPageTablePart",3008],[5,"PageTablePart",3008],[5,"PTEntryFlags",3008],[5,"PageTable",3008],[6,"Mapping",3008],[6,"PageSize",5025],[5,"PTPage",3008],[5,"PerCPUPageMappingGuard",3251],[5,"StackRange",3266],[5,"ValidBitmap",3287],[5,"VirtualRange",3333],[10,"VirtualMapping",3424],[5,"VMPageFaultResolution",3424],[5,"VMMAdapter",3424],[5,"VMM",3424],[5,"VMFileMapping",3505],[5,"VMKernelStack",3580],[5,"VMPhysMem",3602],[5,"RawAllocMapping",3623],[5,"VMReserved",3642],[5,"VMalloc",3662],[5,"CursorMut",5295],[6,"SvsmPlatformCell",3728],[5,"PageEncryptionMasks",3728],[6,"PageStateChangeOp",3728],[6,"SvsmPlatformType",5296],[5,"NativePlatform",3792],[5,"SnpPlatform",3818],[5,"RequestParams",3844],[5,"PValidateRequest",3869],[6,"SvsmResultCode",3908],[6,"TpmPlatformCommand",3955],[5,"TpmSendCommandRequest",3955],[5,"TpmSendCommandResponse",3955],[5,"SvsmCaa",4014],[5,"SerialPort",4047],[5,"PageStateChangeHeader",4109],[10,"Sized",5294],[5,"HVDoorbellFlags",4274],[5,"GHCBHvFeatures",4327],[6,"GHCBMsr",4327],[1,"never"],[5,"SecretsPage",4432],[5,"SEVStatusFlags",4473],[5,"RMPFlags",4548],[6,"PvalidateOp",4548],[1,"i32"],[5,"SVSMIOPort",4683],[5,"NativeIOPort",4683],[5,"Elf64File",5297],[5,"Elf64PhdrFlags",5298],[5,"TaskList",4796],[5,"TaskListAdapter",4845],[5,"LinkedList",5299],[5,"Task",4845],[6,"TaskState",4845],[5,"TaskRunListAdapter",4845],[5,"TaskIDAllocator",4845],[5,"TaskSchedState",4845],[5,"WaitQueue",5011],[10,"BitmapAllocator",5067],[5,"BitmapAllocator64",5067],[5,"BitmapAllocatorTree",5067],[10,"Clone",5300],[5,"ImmutAfterInitCell",5128],[6,"ImmutAfterInitError",5128],[5,"ImmutAfterInitRef",5128],[10,"PartialOrd",5270],[10,"VtpmProtocolInterface",5220],[10,"VtpmInterface",5220],[10,"MsTpmSimulatorInterface",5220],[5,"MsTpm",5233],[8,"c_ulong",5301],[6,"c_void",5301],[8,"c_char",5301],[8,"c_int",5301],[5,"ExceptionTableEntry",616],[10,"Aes256GcmTrait",1415],[5,"RequestInfo",4014],[6,"GHCBExitCode",4109],[5,"IgvmParamInfo",4719],[8,"BitmapAllocator1024",5067]],"b":[[231,"impl-LowerHex-for-PhysAddr"],[232,"impl-Display-for-PhysAddr"],[233,"impl-Debug-for-PhysAddr"],[234,"impl-LowerHex-for-VirtAddr"],[235,"impl-Debug-for-VirtAddr"],[236,"impl-Display-for-VirtAddr"],[237,"impl-From%3Cusize%3E-for-PhysAddr"],[238,"impl-From%3Cu64%3E-for-PhysAddr"],[240,"impl-From%3C*mut+T%3E-for-VirtAddr"],[242,"impl-From%3Cu64%3E-for-VirtAddr"],[243,"impl-From%3C*const+T%3E-for-VirtAddr"],[244,"impl-From%3Cusize%3E-for-VirtAddr"],[263,"impl-Sub%3Cusize%3E-for-PhysAddr"],[264,"impl-Sub-for-PhysAddr"],[265,"impl-Sub%3Cusize%3E-for-VirtAddr"],[266,"impl-Sub-for-VirtAddr"],[419,"impl-CR0Flags"],[420,"impl-Flags-for-CR0Flags"],[421,"impl-CR4Flags"],[422,"impl-Flags-for-CR4Flags"],[443,"impl-Binary-for-CR0Flags"],[444,"impl-LowerHex-for-CR0Flags"],[445,"impl-UpperHex-for-CR0Flags"],[446,"impl-Octal-for-CR0Flags"],[447,"impl-Binary-for-CR4Flags"],[448,"impl-Octal-for-CR4Flags"],[449,"impl-UpperHex-for-CR4Flags"],[450,"impl-LowerHex-for-CR4Flags"],[455,"impl-Flags-for-CR0Flags"],[456,"impl-CR0Flags"],[457,"impl-Flags-for-CR4Flags"],[458,"impl-CR4Flags"],[571,"impl-EFERFlags"],[572,"impl-Flags-for-EFERFlags"],[583,"impl-LowerHex-for-EFERFlags"],[584,"impl-Octal-for-EFERFlags"],[585,"impl-Binary-for-EFERFlags"],[586,"impl-UpperHex-for-EFERFlags"],[589,"impl-EFERFlags"],[590,"impl-Flags-for-EFERFlags"],[1370,"impl-Debug-for-VcError"],[1371,"impl-Display-for-VcError"],[1640,"impl-From%3CTaskError%3E-for-SvsmError"],[1641,"impl-From%3CFwCfgError%3E-for-SvsmError"],[1642,"impl-From%3CPackItError%3E-for-SvsmError"],[1644,"impl-From%3CGhcbMsrError%3E-for-SvsmError"],[1645,"impl-From%3CAllocError%3E-for-SvsmError"],[1646,"impl-From%3CSevSnpError%3E-for-SvsmError"],[1647,"impl-From%3CGhcbError%3E-for-SvsmError"],[1648,"impl-From%3CVcError%3E-for-SvsmError"],[1649,"impl-From%3CFsError%3E-for-SvsmError"],[1996,"impl-Display-for-Uuid"],[1997,"impl-Debug-for-Uuid"],[3053,"impl-PTEntryFlags"],[3054,"impl-Flags-for-PTEntryFlags"],[3104,"impl-Binary-for-PTEntryFlags"],[3105,"impl-UpperHex-for-PTEntryFlags"],[3106,"impl-Debug-for-PTEntryFlags"],[3107,"impl-LowerHex-for-PTEntryFlags"],[3108,"impl-Octal-for-PTEntryFlags"],[3128,"impl-Flags-for-PTEntryFlags"],[3129,"impl-PTEntryFlags"],[3517,"impl-VMFileMappingFlags"],[3518,"impl-Flags-for-VMFileMappingFlags"],[3534,"impl-Binary-for-VMFileMappingFlags"],[3535,"impl-UpperHex-for-VMFileMappingFlags"],[3536,"impl-Debug-for-VMFileMappingFlags"],[3537,"impl-LowerHex-for-VMFileMappingFlags"],[3538,"impl-Octal-for-VMFileMappingFlags"],[3543,"impl-VMFileMappingFlags"],[3544,"impl-Flags-for-VMFileMappingFlags"],[4354,"impl-Flags-for-GHCBHvFeatures"],[4355,"impl-GHCBHvFeatures"],[4377,"impl-Debug-for-GHCBHvFeatures"],[4378,"impl-UpperHex-for-GHCBHvFeatures"],[4379,"impl-Octal-for-GHCBHvFeatures"],[4380,"impl-Display-for-GHCBHvFeatures"],[4381,"impl-LowerHex-for-GHCBHvFeatures"],[4382,"impl-Binary-for-GHCBHvFeatures"],[4387,"impl-Flags-for-GHCBHvFeatures"],[4388,"impl-GHCBHvFeatures"],[4493,"impl-Flags-for-SEVStatusFlags"],[4494,"impl-SEVStatusFlags"],[4507,"impl-Display-for-SEVStatusFlags"],[4508,"impl-LowerHex-for-SEVStatusFlags"],[4509,"impl-Octal-for-SEVStatusFlags"],[4510,"impl-Binary-for-SEVStatusFlags"],[4511,"impl-UpperHex-for-SEVStatusFlags"],[4514,"impl-Flags-for-SEVStatusFlags"],[4515,"impl-SEVStatusFlags"],[4575,"impl-RMPFlags"],[4576,"impl-Flags-for-RMPFlags"],[4596,"impl-Debug-for-SevSnpError"],[4597,"impl-Display-for-SevSnpError"],[4599,"impl-UpperHex-for-RMPFlags"],[4600,"impl-Binary-for-RMPFlags"],[4601,"impl-Octal-for-RMPFlags"],[4602,"impl-LowerHex-for-RMPFlags"],[4607,"impl-Flags-for-RMPFlags"],[4608,"impl-RMPFlags"],[4666,"impl-PartialEq%3C%26str%3E-for-FixedString%3CN%3E"],[4667,"impl-PartialEq-for-FixedString%3CN%3E"],[4668,"impl-Debug-for-FixedString%3CT%3E"],[4669,"impl-Display-for-FixedString%3CT%3E"],[4670,"impl-From%3C%26str%3E-for-FixedString%3CN%3E"],[4672,"impl-From%3C%5Bu8;+N%5D%3E-for-FixedString%3CN%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
